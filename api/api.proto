syntax = "proto3";
package api;
option go_package = ".;api";

service Greeter {
  rpc SayHello(HelloRequest) returns (HelloReply) {}
}

message HelloRequest {
  string name = 1;
}

message HelloReply {
  string message = 1;
}

//////////////////////
//// Logger Service 
//////////////////////
message Log {
  string message = 1;
  string subject = 2;
}

//////////////////////
//// Customer Service 
//////////////////////
service Customer {
  rpc NewCustomer(NewCustomerRequest) returns (CustomerReply) {}
  rpc GetCustomer(GetCustomerRequest) returns (CustomerReply) {}
}

message NewCustomerRequest {
  string name = 1;
  string address = 2;
}

message GetCustomerRequest {
  uint32 id = 1;
}

message CustomerReply {
  uint32 id = 1;
  string name = 2;
  string address = 3;
}


//////////////////////
//// Payment Service 
//////////////////////
service Payment {
  rpc PayPayment(PayPaymentRequest) returns (PayPaymentReply) {}
}
message NewPaymentRequest{
  uint32  orderId = 1;
  float  value = 2;
}

message PayPaymentRequest{
  uint32  orderId = 1;
  float  value = 2;
}

message PayPaymentReply{
  uint32          orderId = 2;
  float           value = 3;
}

message RefundPaymentRequest{
  uint32  orderId = 1;
  float  value = 2;
}

///////////////////////
//// Order Service 
///////////////////////
service Order {
  rpc newOrder(NewOrderRequest) returns (OrderReply) {}
}
message OrderStorage{
  uint32 customerID =1;
  map<uint32, uint32> article = 2;
  float totalCost = 3;
  bool payed = 4;
  bool shipped = 5;
}
message NewOrderRequest{
  uint32 customerID =1;
  map<uint32, uint32> article = 2;
}
message OrderReply{
  uint32  orderId = 1;
}
message OrderPaymentUpdate{
  uint32  orderId = 1;
}
message OrderShipmentUpdate{
  uint32  orderId = 1;
}
message RefundOrderRequest{
  uint32  orderId = 1;
  map<uint32, uint32> article = 2;
}


///////////////////////
//// Stock Service 
///////////////////////
service Stock {
  rpc NewStock(NewStockRequest) returns (GetReply) {}
  rpc AddStock(AddStockRequest) returns (GetReply) {}
  rpc GetArticle(TakeArticle) returns (GetReply) {}
  rpc GetStock(ArticleID) returns (GetStockReply) {}
}

message NewStockRequest {
  int32 amount = 1;
  uint32 reserved = 2;
}

message AddStockRequest {
  uint32 id = 1;
  int32 amount = 2;
}

message GetReply {
  int32 amount = 1;
}

message TakeArticle {
  uint32 id = 1;
  int32 amount = 2;
}

message ArticleID {
  uint32 id = 1;
}

message GetStockReply {
  bool answer = 1;
}


///////////////////////
//// Supplier Service
///////////////////////

// work in progress
service Supplier {
  rpc DeliveredArticle(NewArticles) returns (GetSupplierReply) {}
  
}

message NewArticles {
  uint32 id = 1;
  uint32 amount = 2;
}

message GetSupplierReply {
  string answer = 1;
}


//////////////////////
//// Catalog Service
//////////////////////

service Catalog {
  rpc GetCatalogInfo(GetCatalog) returns (CatalogReply) {}
  rpc NewCatalogArticle(NewCatalog) returns (CatalogReply) {}
  rpc UpdateCatalog(UpdatedData) returns(CatalogReply) {}
  rpc DeleteCatalog(GetCatalog) returns (CatalogReply) {}
}

message GetCatalog {
  uint32 id = 1;
}

message CatalogReply {
  uint32 id = 1;
  string name = 2;
  string description = 3;
  double price = 4;
}

message NewCatalog {
  string name = 1;
  string description = 2;
  double price = 3;
}

message UpdatedData {
  uint32 id = 1;
  string name = 2;
  string description = 3;
  double price = 4;
}


////////////////////////
//// Shipment Service
////////////////////////

service Shipment {
 rpc NewShipment(NewShipmentRequest) returns (ShipmentReply) {}
 rpc SendShipment(GetShipmentRequest) returns (ShipmentReply) {}
 rpc ReturnedShipment(GetShipmentRequest) returns (ShipmentReply) {}
}

message NewShipmentRequest {
  map<uint32, uint32> articles = 1;
  map<uint32, bool> ready = 2;
}

message ShipmentReply {
  uint32 id = 1;
  map<uint32, uint32> articles = 2;
  map<uint32, bool> ready = 3;
}

message GetShipmentRequest {
  uint32 id = 1;
  map<uint32, uint32> articles = 2;
  map<uint32, bool> ready = 3;
}
