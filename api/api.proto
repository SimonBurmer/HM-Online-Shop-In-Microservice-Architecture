syntax = "proto3";
package api;
option go_package = ".;api";


//////////////////////
//// Logger Service 
//////////////////////
message Log {
  string message = 1;
  string subject = 2;
}

//////////////////////
//// Customer Service 
//////////////////////
service Customer {
  rpc NewCustomer(NewCustomerRequest) returns (CustomerReply) {}
  rpc GetCustomer(GetCustomerRequest) returns (CustomerReply) {}
}

message NewCustomerRequest {
  string name = 1;
  string address = 2;
}

message GetCustomerRequest {
  uint32 id = 1;
}

message CustomerReply {
  uint32 id = 1;
  string name = 2;
  string address = 3;
}


//////////////////////
//// Payment Service 
//////////////////////
service Payment {
  rpc PayPayment(PayPaymentRequest) returns (PayPaymentReply) {}
}
message PaymentStorage{
  uint32  orderId = 1;
  float  value = 2;
  bool canceled = 3;
  // hier keine customer name usw da sonst insonsistenz wenn customer name ändert (single point of truth)
}

message NewPaymentRequest{
  uint32  orderId = 1;
  float  value = 2;
}

message PayPaymentRequest{ // Bank API sagt bescheid, das summe x on KontoNr y auf unser konto überwiesen wurde
  uint32  orderId = 1;
  float  value = 2;
}

message PayPaymentReply{
  uint32  orderId = 2;
  float stillToPay = 3;
}

message CancelPaymentRequest{
  uint32 orderId = 1;
  string customerName = 2;    // ersetzten durch kontonr.
  string customerAddress = 3;
}

message RefundPaymentRequest{
  uint32  orderId = 1;
  string  customerName = 2;
  string customerAddress = 3;
  float  value = 4;
}

///////////////////////
//// Order Service 
///////////////////////
service Order {
  rpc NewOrder(NewOrderRequest) returns (OrderReply) {}
}
message OrderStorage{
  uint32 customerID =1;
  map<uint32, uint32> articles = 2;
  float totalCost = 3;
  bool payed = 4;
  bool shipped = 5;
  bool canceled = 6; 
}
message NewOrderRequest{
  uint32 customerID =1;
  map<uint32, uint32> articles = 2;
}
message OrderReply{
  uint32  orderId = 1;
}
message OrderPaymentUpdate{
  uint32  orderId = 1;
}
message OrderShipmentUpdate{
  uint32  orderId = 1;
}
message CancelOrderRequest{
  uint32 orderId = 1;
}
message RefundArticleRequest{
  uint32 orderId = 1;
  uint32 articleId = 2;
}


///////////////////////
//// Stock Service 
///////////////////////
service Stock {
  rpc NewStock(NewStockRequest) returns (GetReply) {}
  rpc GetArticle(TakeArticle) returns (GetReply) {}
  rpc GetStock(ArticleID) returns (GetStockReply) {}
}

message NewStockRequest {
  int32 amount = 1;
  map<uint32, uint32> reserved = 2;
}

message AddStockRequest {
  uint32 id = 1;
  int32 amount = 2;
}

message GetReply {
  int32 amount = 1;
}

message TakeArticle {
  uint32 id = 1;
  int32 amount = 2;
  uint32 shipmentId = 3;
}

message ArticleID {
  uint32 id = 1;
}

message GetStockReply {
  bool answer = 1;
}

message CancelReservedRequest {
  uint32 id = 1;
  uint32 shipmentId = 2;
}


///////////////////////
//// Supplier Service
///////////////////////

service Supplier {
  rpc DeliveredArticle(NewArticles) returns (GetSupplierReply) {}
  rpc OrderArticle(OrderArticleRequest) returns (SupplierName) {}
}

message OrderArticleRequest {
  uint32 orderId = 1;
  uint32 articleId = 2;
  uint32 amount = 3;
}

message SupplierStorage {
  uint32 articleId = 1;
  uint32 amount = 2;
  string nameSupplier = 3;
}

message NewArticles {
  uint32 orderId = 1;
  uint32 articleId = 2;
  uint32 amount = 3;
  string nameSupplier = 4;
}

message GetSupplierReply {
  uint32 orderId = 1;
  uint32 articleId = 2;
  uint32 amount = 3;
  string nameSupplier = 4;
}

message SupplierName {
  string name = 1;
}


//////////////////////
//// Catalog Service
//////////////////////

service Catalog {
  rpc GetCatalogInfo(GetCatalog) returns (CatalogReplyInfo) {}
  rpc NewCatalogArticle(NewCatalog) returns (CatalogReply) {}
  rpc UpdateCatalog(UpdatedData) returns(CatalogReply) {}
  rpc DeleteCatalog(GetCatalog) returns (CatalogReply) {}
}

message GetCatalog {
  uint32 id = 1;
}

message CatalogReplyInfo {
  uint32 id = 1;
  string name = 2;
  string description = 3;
  double price = 4;
  bool availability = 5;
}

message CatalogReply {
  uint32 id = 1;
  string name = 2;
  string description = 3;
  double price = 4;
}

message NewCatalog {
  string name = 1;
  string description = 2;
  double price = 3;
}

message UpdatedData {
  uint32 id = 1;
  string name = 2;
  string description = 3;
  double price = 4;
}


////////////////////////
//// Shipment Service
////////////////////////

service Shipment {
 rpc SendShipment(GetShipmentRequest) returns (ShipmentReply) {}
 rpc ReturnDefectArticle(ShipmentReturnRequest) returns (ReturnReply) {}
 rpc Refund (ShipmentReturnRequest) returns (ReturnReply) {}
}

message NewShipmentRequest {
  uint32 orderID = 1;
  map<uint32, uint32> articles = 2;
  string address = 3;
}

message ShipmentStorage {
  map<uint32, uint32> articles = 1;
  map<uint32, uint32> ready = 2;
  string address = 3;
}

message ShipmentReply {
  uint32 id = 1;
  map<uint32, uint32> articles = 2;
  map<uint32, uint32> ready = 3;
  string address = 4;
}

message GetShipmentRequest {
  uint32 id = 1;
  map<uint32, uint32> articles = 2;
  map<uint32, uint32> ready = 3;
}

message ShipmentReadiness {
  uint32 id = 1;
  uint32 articleId = 2;
  uint32 amount = 3;
}

message CancelShipmentRequest {
  uint32 id = 1;
}

message ShipmentReturnRequest {
  uint32 id = 1;
  uint32 articleId = 2;
  uint32 amount = 3;
}

message ReturnReply {
  uint32 id = 1;
  uint32 articleId = 2;
  uint32 amount = 3;
}


