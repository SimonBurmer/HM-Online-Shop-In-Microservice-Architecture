// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//////////////////////
//// Logger Service
//////////////////////
type Log struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (m *Log) Reset()      { *m = Log{} }
func (*Log) ProtoMessage() {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *Log) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Log.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return m.Size()
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Log) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

type NewCustomerRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *NewCustomerRequest) Reset()      { *m = NewCustomerRequest{} }
func (*NewCustomerRequest) ProtoMessage() {}
func (*NewCustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *NewCustomerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCustomerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCustomerRequest.Merge(m, src)
}
func (m *NewCustomerRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCustomerRequest proto.InternalMessageInfo

func (m *NewCustomerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewCustomerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetCustomerRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetCustomerRequest) Reset()      { *m = GetCustomerRequest{} }
func (*GetCustomerRequest) ProtoMessage() {}
func (*GetCustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *GetCustomerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCustomerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCustomerRequest.Merge(m, src)
}
func (m *GetCustomerRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCustomerRequest proto.InternalMessageInfo

func (m *GetCustomerRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CustomerReply struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CustomerReply) Reset()      { *m = CustomerReply{} }
func (*CustomerReply) ProtoMessage() {}
func (*CustomerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *CustomerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerReply.Merge(m, src)
}
func (m *CustomerReply) XXX_Size() int {
	return m.Size()
}
func (m *CustomerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerReply.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerReply proto.InternalMessageInfo

func (m *CustomerReply) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CustomerReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustomerReply) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type PaymentStorage struct {
	OrderId  uint32  `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Value    float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	Canceled bool    `protobuf:"varint,3,opt,name=canceled,proto3" json:"canceled,omitempty"`
}

func (m *PaymentStorage) Reset()      { *m = PaymentStorage{} }
func (*PaymentStorage) ProtoMessage() {}
func (*PaymentStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *PaymentStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentStorage.Merge(m, src)
}
func (m *PaymentStorage) XXX_Size() int {
	return m.Size()
}
func (m *PaymentStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentStorage.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentStorage proto.InternalMessageInfo

func (m *PaymentStorage) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *PaymentStorage) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *PaymentStorage) GetCanceled() bool {
	if m != nil {
		return m.Canceled
	}
	return false
}

type NewPaymentRequest struct {
	OrderId uint32  `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Value   float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *NewPaymentRequest) Reset()      { *m = NewPaymentRequest{} }
func (*NewPaymentRequest) ProtoMessage() {}
func (*NewPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *NewPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewPaymentRequest.Merge(m, src)
}
func (m *NewPaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewPaymentRequest proto.InternalMessageInfo

func (m *NewPaymentRequest) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *NewPaymentRequest) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PayPaymentRequest struct {
	OrderId uint32  `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Value   float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PayPaymentRequest) Reset()      { *m = PayPaymentRequest{} }
func (*PayPaymentRequest) ProtoMessage() {}
func (*PayPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *PayPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayPaymentRequest.Merge(m, src)
}
func (m *PayPaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *PayPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PayPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PayPaymentRequest proto.InternalMessageInfo

func (m *PayPaymentRequest) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *PayPaymentRequest) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PayPaymentReply struct {
	OrderId    uint32  `protobuf:"varint,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	StillToPay float32 `protobuf:"fixed32,3,opt,name=stillToPay,proto3" json:"stillToPay,omitempty"`
}

func (m *PayPaymentReply) Reset()      { *m = PayPaymentReply{} }
func (*PayPaymentReply) ProtoMessage() {}
func (*PayPaymentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *PayPaymentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayPaymentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayPaymentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayPaymentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayPaymentReply.Merge(m, src)
}
func (m *PayPaymentReply) XXX_Size() int {
	return m.Size()
}
func (m *PayPaymentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PayPaymentReply.DiscardUnknown(m)
}

var xxx_messageInfo_PayPaymentReply proto.InternalMessageInfo

func (m *PayPaymentReply) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *PayPaymentReply) GetStillToPay() float32 {
	if m != nil {
		return m.StillToPay
	}
	return 0
}

type CancelPaymentRequest struct {
	OrderId         uint32 `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	CustomerName    string `protobuf:"bytes,2,opt,name=customerName,proto3" json:"customerName,omitempty"`
	CustomerAddress string `protobuf:"bytes,3,opt,name=customerAddress,proto3" json:"customerAddress,omitempty"`
}

func (m *CancelPaymentRequest) Reset()      { *m = CancelPaymentRequest{} }
func (*CancelPaymentRequest) ProtoMessage() {}
func (*CancelPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *CancelPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelPaymentRequest.Merge(m, src)
}
func (m *CancelPaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelPaymentRequest proto.InternalMessageInfo

func (m *CancelPaymentRequest) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *CancelPaymentRequest) GetCustomerName() string {
	if m != nil {
		return m.CustomerName
	}
	return ""
}

func (m *CancelPaymentRequest) GetCustomerAddress() string {
	if m != nil {
		return m.CustomerAddress
	}
	return ""
}

type RefundPaymentRequest struct {
	OrderId         uint32  `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	CustomerName    string  `protobuf:"bytes,2,opt,name=customerName,proto3" json:"customerName,omitempty"`
	CustomerAddress string  `protobuf:"bytes,3,opt,name=customerAddress,proto3" json:"customerAddress,omitempty"`
	Value           float32 `protobuf:"fixed32,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RefundPaymentRequest) Reset()      { *m = RefundPaymentRequest{} }
func (*RefundPaymentRequest) ProtoMessage() {}
func (*RefundPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *RefundPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefundPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefundPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefundPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefundPaymentRequest.Merge(m, src)
}
func (m *RefundPaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *RefundPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefundPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefundPaymentRequest proto.InternalMessageInfo

func (m *RefundPaymentRequest) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *RefundPaymentRequest) GetCustomerName() string {
	if m != nil {
		return m.CustomerName
	}
	return ""
}

func (m *RefundPaymentRequest) GetCustomerAddress() string {
	if m != nil {
		return m.CustomerAddress
	}
	return ""
}

func (m *RefundPaymentRequest) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type OrderStorage struct {
	CustomerID uint32            `protobuf:"varint,1,opt,name=customerID,proto3" json:"customerID,omitempty"`
	Articles   map[uint32]uint32 `protobuf:"bytes,2,rep,name=articles,proto3" json:"articles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalCost  float32           `protobuf:"fixed32,3,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	Payed      bool              `protobuf:"varint,4,opt,name=payed,proto3" json:"payed,omitempty"`
	Shipped    bool              `protobuf:"varint,5,opt,name=shipped,proto3" json:"shipped,omitempty"`
	Canceled   bool              `protobuf:"varint,6,opt,name=canceled,proto3" json:"canceled,omitempty"`
}

func (m *OrderStorage) Reset()      { *m = OrderStorage{} }
func (*OrderStorage) ProtoMessage() {}
func (*OrderStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *OrderStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderStorage.Merge(m, src)
}
func (m *OrderStorage) XXX_Size() int {
	return m.Size()
}
func (m *OrderStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderStorage.DiscardUnknown(m)
}

var xxx_messageInfo_OrderStorage proto.InternalMessageInfo

func (m *OrderStorage) GetCustomerID() uint32 {
	if m != nil {
		return m.CustomerID
	}
	return 0
}

func (m *OrderStorage) GetArticles() map[uint32]uint32 {
	if m != nil {
		return m.Articles
	}
	return nil
}

func (m *OrderStorage) GetTotalCost() float32 {
	if m != nil {
		return m.TotalCost
	}
	return 0
}

func (m *OrderStorage) GetPayed() bool {
	if m != nil {
		return m.Payed
	}
	return false
}

func (m *OrderStorage) GetShipped() bool {
	if m != nil {
		return m.Shipped
	}
	return false
}

func (m *OrderStorage) GetCanceled() bool {
	if m != nil {
		return m.Canceled
	}
	return false
}

type NewOrderRequest struct {
	CustomerID uint32            `protobuf:"varint,1,opt,name=customerID,proto3" json:"customerID,omitempty"`
	Articles   map[uint32]uint32 `protobuf:"bytes,2,rep,name=articles,proto3" json:"articles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *NewOrderRequest) Reset()      { *m = NewOrderRequest{} }
func (*NewOrderRequest) ProtoMessage() {}
func (*NewOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *NewOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewOrderRequest.Merge(m, src)
}
func (m *NewOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewOrderRequest proto.InternalMessageInfo

func (m *NewOrderRequest) GetCustomerID() uint32 {
	if m != nil {
		return m.CustomerID
	}
	return 0
}

func (m *NewOrderRequest) GetArticles() map[uint32]uint32 {
	if m != nil {
		return m.Articles
	}
	return nil
}

type OrderReply struct {
	OrderId   uint32  `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	TotalCost float32 `protobuf:"fixed32,2,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
}

func (m *OrderReply) Reset()      { *m = OrderReply{} }
func (*OrderReply) ProtoMessage() {}
func (*OrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *OrderReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderReply.Merge(m, src)
}
func (m *OrderReply) XXX_Size() int {
	return m.Size()
}
func (m *OrderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderReply.DiscardUnknown(m)
}

var xxx_messageInfo_OrderReply proto.InternalMessageInfo

func (m *OrderReply) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *OrderReply) GetTotalCost() float32 {
	if m != nil {
		return m.TotalCost
	}
	return 0
}

type OrderPaymentUpdate struct {
	OrderId uint32 `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *OrderPaymentUpdate) Reset()      { *m = OrderPaymentUpdate{} }
func (*OrderPaymentUpdate) ProtoMessage() {}
func (*OrderPaymentUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *OrderPaymentUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderPaymentUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderPaymentUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderPaymentUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderPaymentUpdate.Merge(m, src)
}
func (m *OrderPaymentUpdate) XXX_Size() int {
	return m.Size()
}
func (m *OrderPaymentUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderPaymentUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_OrderPaymentUpdate proto.InternalMessageInfo

func (m *OrderPaymentUpdate) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type OrderShipmentUpdate struct {
	OrderId uint32 `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *OrderShipmentUpdate) Reset()      { *m = OrderShipmentUpdate{} }
func (*OrderShipmentUpdate) ProtoMessage() {}
func (*OrderShipmentUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *OrderShipmentUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderShipmentUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderShipmentUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderShipmentUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderShipmentUpdate.Merge(m, src)
}
func (m *OrderShipmentUpdate) XXX_Size() int {
	return m.Size()
}
func (m *OrderShipmentUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderShipmentUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_OrderShipmentUpdate proto.InternalMessageInfo

func (m *OrderShipmentUpdate) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type CancelOrderRequest struct {
	OrderId uint32 `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *CancelOrderRequest) Reset()      { *m = CancelOrderRequest{} }
func (*CancelOrderRequest) ProtoMessage() {}
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *CancelOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOrderRequest.Merge(m, src)
}
func (m *CancelOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOrderRequest proto.InternalMessageInfo

func (m *CancelOrderRequest) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type RefundArticleRequest struct {
	OrderId   uint32 `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ArticleId uint32 `protobuf:"varint,2,opt,name=articleId,proto3" json:"articleId,omitempty"`
}

func (m *RefundArticleRequest) Reset()      { *m = RefundArticleRequest{} }
func (*RefundArticleRequest) ProtoMessage() {}
func (*RefundArticleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *RefundArticleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefundArticleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefundArticleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefundArticleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefundArticleRequest.Merge(m, src)
}
func (m *RefundArticleRequest) XXX_Size() int {
	return m.Size()
}
func (m *RefundArticleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefundArticleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefundArticleRequest proto.InternalMessageInfo

func (m *RefundArticleRequest) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *RefundArticleRequest) GetArticleId() uint32 {
	if m != nil {
		return m.ArticleId
	}
	return 0
}

type NewStockRequest struct {
	Amount   int32             `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Reserved map[uint32]uint32 `protobuf:"bytes,2,rep,name=reserved,proto3" json:"reserved,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *NewStockRequest) Reset()      { *m = NewStockRequest{} }
func (*NewStockRequest) ProtoMessage() {}
func (*NewStockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *NewStockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewStockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewStockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewStockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewStockRequest.Merge(m, src)
}
func (m *NewStockRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewStockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewStockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewStockRequest proto.InternalMessageInfo

func (m *NewStockRequest) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *NewStockRequest) GetReserved() map[uint32]uint32 {
	if m != nil {
		return m.Reserved
	}
	return nil
}

type AddStockRequest struct {
	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *AddStockRequest) Reset()      { *m = AddStockRequest{} }
func (*AddStockRequest) ProtoMessage() {}
func (*AddStockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *AddStockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddStockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddStockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddStockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddStockRequest.Merge(m, src)
}
func (m *AddStockRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddStockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddStockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddStockRequest proto.InternalMessageInfo

func (m *AddStockRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddStockRequest) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type GetReply struct {
	Amount int32 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *GetReply) Reset()      { *m = GetReply{} }
func (*GetReply) ProtoMessage() {}
func (*GetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *GetReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReply.Merge(m, src)
}
func (m *GetReply) XXX_Size() int {
	return m.Size()
}
func (m *GetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetReply proto.InternalMessageInfo

func (m *GetReply) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type TakeArticle struct {
	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount     int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	ShipmentId uint32 `protobuf:"varint,3,opt,name=shipmentId,proto3" json:"shipmentId,omitempty"`
}

func (m *TakeArticle) Reset()      { *m = TakeArticle{} }
func (*TakeArticle) ProtoMessage() {}
func (*TakeArticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *TakeArticle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TakeArticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TakeArticle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TakeArticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TakeArticle.Merge(m, src)
}
func (m *TakeArticle) XXX_Size() int {
	return m.Size()
}
func (m *TakeArticle) XXX_DiscardUnknown() {
	xxx_messageInfo_TakeArticle.DiscardUnknown(m)
}

var xxx_messageInfo_TakeArticle proto.InternalMessageInfo

func (m *TakeArticle) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TakeArticle) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TakeArticle) GetShipmentId() uint32 {
	if m != nil {
		return m.ShipmentId
	}
	return 0
}

type ArticleID struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ArticleID) Reset()      { *m = ArticleID{} }
func (*ArticleID) ProtoMessage() {}
func (*ArticleID) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *ArticleID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleID.Merge(m, src)
}
func (m *ArticleID) XXX_Size() int {
	return m.Size()
}
func (m *ArticleID) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleID.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleID proto.InternalMessageInfo

func (m *ArticleID) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetStockReply struct {
	Answer bool `protobuf:"varint,1,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (m *GetStockReply) Reset()      { *m = GetStockReply{} }
func (*GetStockReply) ProtoMessage() {}
func (*GetStockReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *GetStockReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStockReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStockReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStockReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStockReply.Merge(m, src)
}
func (m *GetStockReply) XXX_Size() int {
	return m.Size()
}
func (m *GetStockReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStockReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetStockReply proto.InternalMessageInfo

func (m *GetStockReply) GetAnswer() bool {
	if m != nil {
		return m.Answer
	}
	return false
}

type CancelReservedRequest struct {
	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShipmentId uint32 `protobuf:"varint,2,opt,name=shipmentId,proto3" json:"shipmentId,omitempty"`
}

func (m *CancelReservedRequest) Reset()      { *m = CancelReservedRequest{} }
func (*CancelReservedRequest) ProtoMessage() {}
func (*CancelReservedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *CancelReservedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelReservedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelReservedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelReservedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelReservedRequest.Merge(m, src)
}
func (m *CancelReservedRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelReservedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelReservedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelReservedRequest proto.InternalMessageInfo

func (m *CancelReservedRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CancelReservedRequest) GetShipmentId() uint32 {
	if m != nil {
		return m.ShipmentId
	}
	return 0
}

type OrderArticleRequest struct {
	OrderId   uint32 `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ArticleId uint32 `protobuf:"varint,2,opt,name=articleId,proto3" json:"articleId,omitempty"`
	Amount    uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *OrderArticleRequest) Reset()      { *m = OrderArticleRequest{} }
func (*OrderArticleRequest) ProtoMessage() {}
func (*OrderArticleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}
func (m *OrderArticleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderArticleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderArticleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderArticleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderArticleRequest.Merge(m, src)
}
func (m *OrderArticleRequest) XXX_Size() int {
	return m.Size()
}
func (m *OrderArticleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderArticleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderArticleRequest proto.InternalMessageInfo

func (m *OrderArticleRequest) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *OrderArticleRequest) GetArticleId() uint32 {
	if m != nil {
		return m.ArticleId
	}
	return 0
}

func (m *OrderArticleRequest) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type SupplierStorage struct {
	ArticleId    uint32 `protobuf:"varint,1,opt,name=articleId,proto3" json:"articleId,omitempty"`
	Amount       uint32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	NameSupplier string `protobuf:"bytes,3,opt,name=nameSupplier,proto3" json:"nameSupplier,omitempty"`
}

func (m *SupplierStorage) Reset()      { *m = SupplierStorage{} }
func (*SupplierStorage) ProtoMessage() {}
func (*SupplierStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}
func (m *SupplierStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplierStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupplierStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupplierStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplierStorage.Merge(m, src)
}
func (m *SupplierStorage) XXX_Size() int {
	return m.Size()
}
func (m *SupplierStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplierStorage.DiscardUnknown(m)
}

var xxx_messageInfo_SupplierStorage proto.InternalMessageInfo

func (m *SupplierStorage) GetArticleId() uint32 {
	if m != nil {
		return m.ArticleId
	}
	return 0
}

func (m *SupplierStorage) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *SupplierStorage) GetNameSupplier() string {
	if m != nil {
		return m.NameSupplier
	}
	return ""
}

type NewArticles struct {
	OrderId      uint32 `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ArticleId    uint32 `protobuf:"varint,2,opt,name=articleId,proto3" json:"articleId,omitempty"`
	Amount       uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	NameSupplier string `protobuf:"bytes,4,opt,name=nameSupplier,proto3" json:"nameSupplier,omitempty"`
}

func (m *NewArticles) Reset()      { *m = NewArticles{} }
func (*NewArticles) ProtoMessage() {}
func (*NewArticles) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}
func (m *NewArticles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewArticles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewArticles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewArticles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewArticles.Merge(m, src)
}
func (m *NewArticles) XXX_Size() int {
	return m.Size()
}
func (m *NewArticles) XXX_DiscardUnknown() {
	xxx_messageInfo_NewArticles.DiscardUnknown(m)
}

var xxx_messageInfo_NewArticles proto.InternalMessageInfo

func (m *NewArticles) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *NewArticles) GetArticleId() uint32 {
	if m != nil {
		return m.ArticleId
	}
	return 0
}

func (m *NewArticles) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *NewArticles) GetNameSupplier() string {
	if m != nil {
		return m.NameSupplier
	}
	return ""
}

type GetSupplierReply struct {
	OrderId      uint32 `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ArticleId    uint32 `protobuf:"varint,2,opt,name=articleId,proto3" json:"articleId,omitempty"`
	Amount       uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	NameSupplier string `protobuf:"bytes,4,opt,name=nameSupplier,proto3" json:"nameSupplier,omitempty"`
}

func (m *GetSupplierReply) Reset()      { *m = GetSupplierReply{} }
func (*GetSupplierReply) ProtoMessage() {}
func (*GetSupplierReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}
func (m *GetSupplierReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSupplierReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSupplierReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSupplierReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSupplierReply.Merge(m, src)
}
func (m *GetSupplierReply) XXX_Size() int {
	return m.Size()
}
func (m *GetSupplierReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSupplierReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetSupplierReply proto.InternalMessageInfo

func (m *GetSupplierReply) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *GetSupplierReply) GetArticleId() uint32 {
	if m != nil {
		return m.ArticleId
	}
	return 0
}

func (m *GetSupplierReply) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *GetSupplierReply) GetNameSupplier() string {
	if m != nil {
		return m.NameSupplier
	}
	return ""
}

type SupplierName struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SupplierName) Reset()      { *m = SupplierName{} }
func (*SupplierName) ProtoMessage() {}
func (*SupplierName) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}
func (m *SupplierName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplierName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupplierName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupplierName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplierName.Merge(m, src)
}
func (m *SupplierName) XXX_Size() int {
	return m.Size()
}
func (m *SupplierName) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplierName.DiscardUnknown(m)
}

var xxx_messageInfo_SupplierName proto.InternalMessageInfo

func (m *SupplierName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetCatalog struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetCatalog) Reset()      { *m = GetCatalog{} }
func (*GetCatalog) ProtoMessage() {}
func (*GetCatalog) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}
func (m *GetCatalog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCatalog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCatalog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCatalog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCatalog.Merge(m, src)
}
func (m *GetCatalog) XXX_Size() int {
	return m.Size()
}
func (m *GetCatalog) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCatalog.DiscardUnknown(m)
}

var xxx_messageInfo_GetCatalog proto.InternalMessageInfo

func (m *GetCatalog) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CatalogReplyInfo struct {
	Id           uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Price        float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	Availability bool    `protobuf:"varint,5,opt,name=availability,proto3" json:"availability,omitempty"`
}

func (m *CatalogReplyInfo) Reset()      { *m = CatalogReplyInfo{} }
func (*CatalogReplyInfo) ProtoMessage() {}
func (*CatalogReplyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{30}
}
func (m *CatalogReplyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CatalogReplyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CatalogReplyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CatalogReplyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogReplyInfo.Merge(m, src)
}
func (m *CatalogReplyInfo) XXX_Size() int {
	return m.Size()
}
func (m *CatalogReplyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogReplyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogReplyInfo proto.InternalMessageInfo

func (m *CatalogReplyInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CatalogReplyInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CatalogReplyInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CatalogReplyInfo) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CatalogReplyInfo) GetAvailability() bool {
	if m != nil {
		return m.Availability
	}
	return false
}

type CatalogReply struct {
	Id          uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Price       float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *CatalogReply) Reset()      { *m = CatalogReply{} }
func (*CatalogReply) ProtoMessage() {}
func (*CatalogReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31}
}
func (m *CatalogReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CatalogReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CatalogReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CatalogReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogReply.Merge(m, src)
}
func (m *CatalogReply) XXX_Size() int {
	return m.Size()
}
func (m *CatalogReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogReply.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogReply proto.InternalMessageInfo

func (m *CatalogReply) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CatalogReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CatalogReply) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CatalogReply) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type NewCatalog struct {
	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Price       float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *NewCatalog) Reset()      { *m = NewCatalog{} }
func (*NewCatalog) ProtoMessage() {}
func (*NewCatalog) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32}
}
func (m *NewCatalog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCatalog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCatalog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCatalog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCatalog.Merge(m, src)
}
func (m *NewCatalog) XXX_Size() int {
	return m.Size()
}
func (m *NewCatalog) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCatalog.DiscardUnknown(m)
}

var xxx_messageInfo_NewCatalog proto.InternalMessageInfo

func (m *NewCatalog) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewCatalog) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NewCatalog) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type UpdatedData struct {
	Id          uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Price       float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *UpdatedData) Reset()      { *m = UpdatedData{} }
func (*UpdatedData) ProtoMessage() {}
func (*UpdatedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33}
}
func (m *UpdatedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatedData.Merge(m, src)
}
func (m *UpdatedData) XXX_Size() int {
	return m.Size()
}
func (m *UpdatedData) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatedData.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatedData proto.InternalMessageInfo

func (m *UpdatedData) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdatedData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdatedData) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdatedData) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type NewShipmentRequest struct {
	OrderID  uint32            `protobuf:"varint,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	Articles map[uint32]uint32 `protobuf:"bytes,2,rep,name=articles,proto3" json:"articles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Address  string            `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *NewShipmentRequest) Reset()      { *m = NewShipmentRequest{} }
func (*NewShipmentRequest) ProtoMessage() {}
func (*NewShipmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{34}
}
func (m *NewShipmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewShipmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewShipmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewShipmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewShipmentRequest.Merge(m, src)
}
func (m *NewShipmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewShipmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewShipmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewShipmentRequest proto.InternalMessageInfo

func (m *NewShipmentRequest) GetOrderID() uint32 {
	if m != nil {
		return m.OrderID
	}
	return 0
}

func (m *NewShipmentRequest) GetArticles() map[uint32]uint32 {
	if m != nil {
		return m.Articles
	}
	return nil
}

func (m *NewShipmentRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ShipmentStorage struct {
	Articles map[uint32]uint32 `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Ready    map[uint32]uint32 `protobuf:"bytes,2,rep,name=ready,proto3" json:"ready,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Address  string            `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *ShipmentStorage) Reset()      { *m = ShipmentStorage{} }
func (*ShipmentStorage) ProtoMessage() {}
func (*ShipmentStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{35}
}
func (m *ShipmentStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShipmentStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShipmentStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShipmentStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShipmentStorage.Merge(m, src)
}
func (m *ShipmentStorage) XXX_Size() int {
	return m.Size()
}
func (m *ShipmentStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_ShipmentStorage.DiscardUnknown(m)
}

var xxx_messageInfo_ShipmentStorage proto.InternalMessageInfo

func (m *ShipmentStorage) GetArticles() map[uint32]uint32 {
	if m != nil {
		return m.Articles
	}
	return nil
}

func (m *ShipmentStorage) GetReady() map[uint32]uint32 {
	if m != nil {
		return m.Ready
	}
	return nil
}

func (m *ShipmentStorage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ShipmentReply struct {
	Id       uint32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Articles map[uint32]uint32 `protobuf:"bytes,2,rep,name=articles,proto3" json:"articles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Ready    map[uint32]uint32 `protobuf:"bytes,3,rep,name=ready,proto3" json:"ready,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Address  string            `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *ShipmentReply) Reset()      { *m = ShipmentReply{} }
func (*ShipmentReply) ProtoMessage() {}
func (*ShipmentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{36}
}
func (m *ShipmentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShipmentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShipmentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShipmentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShipmentReply.Merge(m, src)
}
func (m *ShipmentReply) XXX_Size() int {
	return m.Size()
}
func (m *ShipmentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ShipmentReply.DiscardUnknown(m)
}

var xxx_messageInfo_ShipmentReply proto.InternalMessageInfo

func (m *ShipmentReply) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ShipmentReply) GetArticles() map[uint32]uint32 {
	if m != nil {
		return m.Articles
	}
	return nil
}

func (m *ShipmentReply) GetReady() map[uint32]uint32 {
	if m != nil {
		return m.Ready
	}
	return nil
}

func (m *ShipmentReply) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetShipmentRequest struct {
	Id       uint32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Articles map[uint32]uint32 `protobuf:"bytes,2,rep,name=articles,proto3" json:"articles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Ready    map[uint32]uint32 `protobuf:"bytes,3,rep,name=ready,proto3" json:"ready,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GetShipmentRequest) Reset()      { *m = GetShipmentRequest{} }
func (*GetShipmentRequest) ProtoMessage() {}
func (*GetShipmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{37}
}
func (m *GetShipmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShipmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShipmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShipmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShipmentRequest.Merge(m, src)
}
func (m *GetShipmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetShipmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShipmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetShipmentRequest proto.InternalMessageInfo

func (m *GetShipmentRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetShipmentRequest) GetArticles() map[uint32]uint32 {
	if m != nil {
		return m.Articles
	}
	return nil
}

func (m *GetShipmentRequest) GetReady() map[uint32]uint32 {
	if m != nil {
		return m.Ready
	}
	return nil
}

type ShipmentReadiness struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ArticleId uint32 `protobuf:"varint,2,opt,name=articleId,proto3" json:"articleId,omitempty"`
	Amount    uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *ShipmentReadiness) Reset()      { *m = ShipmentReadiness{} }
func (*ShipmentReadiness) ProtoMessage() {}
func (*ShipmentReadiness) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{38}
}
func (m *ShipmentReadiness) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShipmentReadiness) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShipmentReadiness.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShipmentReadiness) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShipmentReadiness.Merge(m, src)
}
func (m *ShipmentReadiness) XXX_Size() int {
	return m.Size()
}
func (m *ShipmentReadiness) XXX_DiscardUnknown() {
	xxx_messageInfo_ShipmentReadiness.DiscardUnknown(m)
}

var xxx_messageInfo_ShipmentReadiness proto.InternalMessageInfo

func (m *ShipmentReadiness) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ShipmentReadiness) GetArticleId() uint32 {
	if m != nil {
		return m.ArticleId
	}
	return 0
}

func (m *ShipmentReadiness) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type CancelShipmentRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CancelShipmentRequest) Reset()      { *m = CancelShipmentRequest{} }
func (*CancelShipmentRequest) ProtoMessage() {}
func (*CancelShipmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{39}
}
func (m *CancelShipmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelShipmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelShipmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelShipmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelShipmentRequest.Merge(m, src)
}
func (m *CancelShipmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelShipmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelShipmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelShipmentRequest proto.InternalMessageInfo

func (m *CancelShipmentRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ShipmentReturnRequest struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ArticleId uint32 `protobuf:"varint,2,opt,name=articleId,proto3" json:"articleId,omitempty"`
	Amount    uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *ShipmentReturnRequest) Reset()      { *m = ShipmentReturnRequest{} }
func (*ShipmentReturnRequest) ProtoMessage() {}
func (*ShipmentReturnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{40}
}
func (m *ShipmentReturnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShipmentReturnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShipmentReturnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShipmentReturnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShipmentReturnRequest.Merge(m, src)
}
func (m *ShipmentReturnRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShipmentReturnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShipmentReturnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShipmentReturnRequest proto.InternalMessageInfo

func (m *ShipmentReturnRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ShipmentReturnRequest) GetArticleId() uint32 {
	if m != nil {
		return m.ArticleId
	}
	return 0
}

func (m *ShipmentReturnRequest) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ReturnReply struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ArticleId uint32 `protobuf:"varint,2,opt,name=articleId,proto3" json:"articleId,omitempty"`
	Amount    uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *ReturnReply) Reset()      { *m = ReturnReply{} }
func (*ReturnReply) ProtoMessage() {}
func (*ReturnReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{41}
}
func (m *ReturnReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReturnReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReturnReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReturnReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReturnReply.Merge(m, src)
}
func (m *ReturnReply) XXX_Size() int {
	return m.Size()
}
func (m *ReturnReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReturnReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReturnReply proto.InternalMessageInfo

func (m *ReturnReply) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReturnReply) GetArticleId() uint32 {
	if m != nil {
		return m.ArticleId
	}
	return 0
}

func (m *ReturnReply) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*Log)(nil), "api.Log")
	proto.RegisterType((*NewCustomerRequest)(nil), "api.NewCustomerRequest")
	proto.RegisterType((*GetCustomerRequest)(nil), "api.GetCustomerRequest")
	proto.RegisterType((*CustomerReply)(nil), "api.CustomerReply")
	proto.RegisterType((*PaymentStorage)(nil), "api.PaymentStorage")
	proto.RegisterType((*NewPaymentRequest)(nil), "api.NewPaymentRequest")
	proto.RegisterType((*PayPaymentRequest)(nil), "api.PayPaymentRequest")
	proto.RegisterType((*PayPaymentReply)(nil), "api.PayPaymentReply")
	proto.RegisterType((*CancelPaymentRequest)(nil), "api.CancelPaymentRequest")
	proto.RegisterType((*RefundPaymentRequest)(nil), "api.RefundPaymentRequest")
	proto.RegisterType((*OrderStorage)(nil), "api.OrderStorage")
	proto.RegisterMapType((map[uint32]uint32)(nil), "api.OrderStorage.ArticlesEntry")
	proto.RegisterType((*NewOrderRequest)(nil), "api.NewOrderRequest")
	proto.RegisterMapType((map[uint32]uint32)(nil), "api.NewOrderRequest.ArticlesEntry")
	proto.RegisterType((*OrderReply)(nil), "api.OrderReply")
	proto.RegisterType((*OrderPaymentUpdate)(nil), "api.OrderPaymentUpdate")
	proto.RegisterType((*OrderShipmentUpdate)(nil), "api.OrderShipmentUpdate")
	proto.RegisterType((*CancelOrderRequest)(nil), "api.CancelOrderRequest")
	proto.RegisterType((*RefundArticleRequest)(nil), "api.RefundArticleRequest")
	proto.RegisterType((*NewStockRequest)(nil), "api.NewStockRequest")
	proto.RegisterMapType((map[uint32]uint32)(nil), "api.NewStockRequest.ReservedEntry")
	proto.RegisterType((*AddStockRequest)(nil), "api.AddStockRequest")
	proto.RegisterType((*GetReply)(nil), "api.GetReply")
	proto.RegisterType((*TakeArticle)(nil), "api.TakeArticle")
	proto.RegisterType((*ArticleID)(nil), "api.ArticleID")
	proto.RegisterType((*GetStockReply)(nil), "api.GetStockReply")
	proto.RegisterType((*CancelReservedRequest)(nil), "api.CancelReservedRequest")
	proto.RegisterType((*OrderArticleRequest)(nil), "api.OrderArticleRequest")
	proto.RegisterType((*SupplierStorage)(nil), "api.SupplierStorage")
	proto.RegisterType((*NewArticles)(nil), "api.NewArticles")
	proto.RegisterType((*GetSupplierReply)(nil), "api.GetSupplierReply")
	proto.RegisterType((*SupplierName)(nil), "api.SupplierName")
	proto.RegisterType((*GetCatalog)(nil), "api.GetCatalog")
	proto.RegisterType((*CatalogReplyInfo)(nil), "api.CatalogReplyInfo")
	proto.RegisterType((*CatalogReply)(nil), "api.CatalogReply")
	proto.RegisterType((*NewCatalog)(nil), "api.NewCatalog")
	proto.RegisterType((*UpdatedData)(nil), "api.UpdatedData")
	proto.RegisterType((*NewShipmentRequest)(nil), "api.NewShipmentRequest")
	proto.RegisterMapType((map[uint32]uint32)(nil), "api.NewShipmentRequest.ArticlesEntry")
	proto.RegisterType((*ShipmentStorage)(nil), "api.ShipmentStorage")
	proto.RegisterMapType((map[uint32]uint32)(nil), "api.ShipmentStorage.ArticlesEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "api.ShipmentStorage.ReadyEntry")
	proto.RegisterType((*ShipmentReply)(nil), "api.ShipmentReply")
	proto.RegisterMapType((map[uint32]uint32)(nil), "api.ShipmentReply.ArticlesEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "api.ShipmentReply.ReadyEntry")
	proto.RegisterType((*GetShipmentRequest)(nil), "api.GetShipmentRequest")
	proto.RegisterMapType((map[uint32]uint32)(nil), "api.GetShipmentRequest.ArticlesEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "api.GetShipmentRequest.ReadyEntry")
	proto.RegisterType((*ShipmentReadiness)(nil), "api.ShipmentReadiness")
	proto.RegisterType((*CancelShipmentRequest)(nil), "api.CancelShipmentRequest")
	proto.RegisterType((*ShipmentReturnRequest)(nil), "api.ShipmentReturnRequest")
	proto.RegisterType((*ReturnReply)(nil), "api.ReturnReply")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x6f, 0xd4, 0x46,
	0x14, 0xb6, 0xbd, 0xd9, 0xb0, 0x79, 0xc9, 0x66, 0x93, 0x21, 0x40, 0xb4, 0xa5, 0x2e, 0x1a, 0xb5,
	0x82, 0xd3, 0xd2, 0x06, 0x51, 0x05, 0x12, 0x2a, 0x85, 0x2c, 0x8a, 0xa2, 0xb6, 0x29, 0x72, 0x40,
	0x6a, 0xab, 0xf6, 0x30, 0xac, 0x07, 0x30, 0x71, 0xd6, 0xae, 0xd7, 0x9b, 0x68, 0x2f, 0x55, 0x7b,
	0x41, 0x3d, 0x56, 0xa8, 0x87, 0xf6, 0xd0, 0x53, 0xa5, 0xaa, 0xa7, 0xfe, 0x1d, 0xa8, 0x27, 0x8e,
	0x1c, 0xcb, 0x72, 0xe9, 0xad, 0xfc, 0x09, 0x95, 0xe7, 0x87, 0x3d, 0xe3, 0x1f, 0x90, 0x00, 0x11,
	0xbd, 0x79, 0xc6, 0xf3, 0xbe, 0x79, 0xef, 0x7b, 0x33, 0x6f, 0xbe, 0x19, 0x98, 0x22, 0xa1, 0xd7,
	0x09, 0xa3, 0x20, 0x0e, 0x50, 0x8d, 0x84, 0x1e, 0xbe, 0x04, 0xb5, 0x4f, 0x82, 0x3b, 0x68, 0x11,
	0x8e, 0xed, 0xd2, 0xc1, 0x80, 0xdc, 0xa1, 0x8b, 0xe6, 0x19, 0xf3, 0xdc, 0x94, 0x23, 0x9b, 0xc9,
	0x9f, 0xc1, 0xf0, 0xd6, 0x3d, 0xda, 0x8b, 0x17, 0x2d, 0xfe, 0x47, 0x34, 0xf1, 0x55, 0x40, 0x5b,
	0x74, 0x7f, 0x7d, 0x38, 0x88, 0x83, 0x5d, 0x1a, 0x39, 0xf4, 0x9b, 0x21, 0x1d, 0xc4, 0x08, 0xc1,
	0x44, 0x9f, 0xec, 0x4a, 0x18, 0xf6, 0x9d, 0x60, 0x10, 0xd7, 0x8d, 0xe8, 0x60, 0x20, 0x31, 0x44,
	0x13, 0xbf, 0x0b, 0x68, 0x83, 0xc6, 0x79, 0x8c, 0x59, 0xb0, 0x3c, 0x97, 0x21, 0x34, 0x1d, 0xcb,
	0x73, 0xf1, 0xa7, 0xd0, 0xcc, 0x86, 0x84, 0xfe, 0x28, 0x3f, 0x20, 0x9d, 0xd4, 0x2a, 0x9f, 0xb4,
	0xa6, 0x4f, 0xfa, 0x15, 0xcc, 0x5e, 0x27, 0xa3, 0x5d, 0xda, 0x8f, 0xb7, 0xe3, 0x20, 0x12, 0x41,
	0x06, 0x91, 0x4b, 0xa3, 0x4d, 0x09, 0x2a, 0x9b, 0x68, 0x01, 0xea, 0x7b, 0xc4, 0x1f, 0x72, 0x68,
	0xcb, 0xe1, 0x0d, 0xd4, 0x86, 0x46, 0x8f, 0xf4, 0x7b, 0xd4, 0xa7, 0x2e, 0x03, 0x6f, 0x38, 0x69,
	0x1b, 0xaf, 0xc3, 0xfc, 0x16, 0xdd, 0x17, 0x13, 0xc8, 0x88, 0x0e, 0x39, 0x41, 0x02, 0x72, 0x9d,
	0x8c, 0x5e, 0x11, 0xe4, 0x63, 0x68, 0xa9, 0x20, 0x09, 0x71, 0x0a, 0x84, 0xa5, 0x43, 0xd8, 0x00,
	0x83, 0xd8, 0xf3, 0xfd, 0x1b, 0xc1, 0x75, 0x32, 0x62, 0x41, 0x59, 0x8e, 0xd2, 0x83, 0xbf, 0x85,
	0x85, 0x75, 0x16, 0xe2, 0x81, 0x9d, 0xc2, 0x30, 0xd3, 0x13, 0x59, 0xdb, 0xca, 0x92, 0xa3, 0xf5,
	0xa1, 0x73, 0xd0, 0x92, 0xed, 0x35, 0x2d, 0x59, 0xf9, 0x6e, 0xfc, 0x93, 0x09, 0x0b, 0x0e, 0xbd,
	0x3d, 0xec, 0xbb, 0x6f, 0xc6, 0x81, 0x8c, 0xe3, 0x09, 0x95, 0xe3, 0x07, 0x16, 0xcc, 0x7c, 0x96,
	0xcc, 0x27, 0x97, 0x92, 0x0d, 0x20, 0x2d, 0x37, 0xbb, 0xc2, 0x23, 0xa5, 0x07, 0xad, 0x40, 0x83,
	0x44, 0xb1, 0xd7, 0xf3, 0x69, 0xb2, 0x19, 0x6a, 0xe7, 0xa6, 0x97, 0xde, 0xe9, 0x24, 0x7b, 0x52,
	0x05, 0xe9, 0xac, 0x89, 0x11, 0xd7, 0xfa, 0x71, 0x34, 0x72, 0x52, 0x03, 0x74, 0x1a, 0xa6, 0xe2,
	0x20, 0x26, 0xfe, 0x7a, 0x30, 0x88, 0x45, 0x8e, 0xb2, 0x8e, 0xc4, 0xc3, 0x90, 0x8c, 0xa8, 0xcb,
	0x3c, 0x6c, 0x38, 0xbc, 0xc1, 0x36, 0xf0, 0x5d, 0x2f, 0x0c, 0xa9, 0xbb, 0x58, 0x67, 0xfd, 0xb2,
	0xa9, 0xad, 0xe2, 0x49, 0x7d, 0x15, 0xb7, 0x57, 0xa0, 0xa9, 0x39, 0x81, 0xe6, 0xa0, 0xb6, 0x43,
	0x47, 0x22, 0xa0, 0xe4, 0x53, 0x5f, 0x74, 0x4d, 0x41, 0xc8, 0x65, 0x6b, 0xd9, 0xc4, 0x7f, 0x9a,
	0xd0, 0xda, 0xa2, 0xfb, 0x2c, 0x24, 0x99, 0xa6, 0x17, 0xf1, 0xf2, 0x51, 0x81, 0x17, 0xcc, 0x78,
	0xc9, 0xe1, 0x54, 0x51, 0xf3, 0x6a, 0x0e, 0x77, 0x01, 0xc4, 0x24, 0xb9, 0x4d, 0x92, 0x5b, 0x51,
	0x1a, 0xff, 0x56, 0x8e, 0x7f, 0xdc, 0x01, 0xc4, 0x50, 0xc4, 0x02, 0xbd, 0x19, 0xba, 0x24, 0x7e,
	0x4e, 0x6d, 0xc1, 0xe7, 0xe1, 0x38, 0xcf, 0xfa, 0x5d, 0x2f, 0x3c, 0x90, 0x41, 0x07, 0x10, 0xdf,
	0x83, 0x1a, 0xb3, 0xd5, 0xe3, 0xb7, 0xe4, 0x96, 0x11, 0xcc, 0xbc, 0x78, 0xcb, 0x9c, 0x86, 0x29,
	0xc1, 0x68, 0x5a, 0x21, 0xb2, 0x0e, 0xfc, 0x3b, 0xcf, 0xeb, 0x76, 0x1c, 0xf4, 0x76, 0x24, 0xd6,
	0x49, 0x98, 0x24, 0xbb, 0xc1, 0xb0, 0x1f, 0x33, 0xa8, 0xba, 0x23, 0x5a, 0x49, 0x3e, 0x23, 0x3a,
	0xa0, 0xd1, 0x1e, 0x75, 0xf3, 0xf9, 0x54, 0xed, 0x3b, 0x8e, 0x18, 0x24, 0xf2, 0x29, 0x6d, 0x92,
	0x7c, 0x6a, 0xbf, 0x0e, 0x95, 0xcf, 0x4b, 0xd0, 0x5a, 0x73, 0x5d, 0xcd, 0xcf, 0xfc, 0x91, 0x91,
	0xf9, 0x6d, 0xa9, 0x7e, 0x63, 0x0c, 0x8d, 0x0d, 0x2a, 0xaa, 0x65, 0x45, 0x6c, 0xf8, 0x26, 0x4c,
	0xdf, 0x20, 0x3b, 0x54, 0xb0, 0x7a, 0x50, 0x68, 0x56, 0x62, 0x45, 0xaa, 0x37, 0xf9, 0xb9, 0xd1,
	0x74, 0x94, 0x1e, 0xfc, 0x16, 0x4c, 0x09, 0xc8, 0xcd, 0x6e, 0xe1, 0x0c, 0x3c, 0x0b, 0xcd, 0x0d,
	0x1a, 0x8b, 0x90, 0xa4, 0x73, 0xfd, 0xc1, 0x3e, 0x8d, 0xd8, 0xa0, 0x86, 0x23, 0x5a, 0x78, 0x03,
	0x4e, 0xf0, 0x45, 0x22, 0xe9, 0xab, 0x62, 0x40, 0x77, 0xc7, 0x2a, 0xb8, 0x43, 0xc5, 0xf2, 0x7c,
	0x3d, 0x8b, 0x47, 0x61, 0x85, 0x47, 0x2e, 0xc9, 0xdc, 0x81, 0xd6, 0xf6, 0x30, 0x0c, 0x7d, 0x2f,
	0xab, 0xa1, 0x1a, 0x90, 0x59, 0x0d, 0x64, 0xa9, 0x40, 0x49, 0xb9, 0x4f, 0x0e, 0x7e, 0x09, 0x26,
	0xea, 0xb8, 0xd6, 0x87, 0xbf, 0x37, 0x61, 0x7a, 0x8b, 0xee, 0xcb, 0x4a, 0xf1, 0xba, 0x83, 0x29,
	0xf8, 0x30, 0x51, 0xe2, 0xc3, 0x7d, 0x13, 0xe6, 0x92, 0x54, 0x8a, 0xf6, 0x01, 0x6a, 0xce, 0x11,
	0x39, 0x82, 0x61, 0x46, 0x7e, 0xb3, 0xb3, 0xb0, 0x44, 0xba, 0xe1, 0xd3, 0x00, 0x89, 0x40, 0x23,
	0x31, 0xf1, 0x83, 0x3b, 0x85, 0x45, 0xf9, 0xc0, 0x84, 0x39, 0xf1, 0x8f, 0x85, 0xb1, 0xd9, 0xbf,
	0x1d, 0x1c, 0x48, 0x9c, 0x9d, 0x81, 0x69, 0x97, 0x0e, 0x7a, 0x91, 0x17, 0xc6, 0x5e, 0xd0, 0x17,
	0xa9, 0x52, 0xbb, 0xd8, 0x61, 0x16, 0x79, 0x3d, 0x7e, 0xdc, 0x9a, 0x0e, 0x6f, 0x24, 0x61, 0x91,
	0x3d, 0xe2, 0xf9, 0xe4, 0x96, 0xe7, 0x7b, 0xf1, 0x48, 0x9c, 0x68, 0x5a, 0x1f, 0xbe, 0x07, 0x33,
	0xaa, 0x4f, 0x47, 0xe9, 0x0f, 0xfe, 0x1c, 0x20, 0xd1, 0xc0, 0x82, 0x9e, 0x32, 0xed, 0x9b, 0x43,
	0xb6, 0x9e, 0x83, 0x5c, 0x53, 0x91, 0x3d, 0x98, 0xe6, 0xe7, 0x81, 0xdb, 0x25, 0x31, 0x39, 0xd2,
	0x20, 0x1e, 0x9a, 0x4c, 0xc9, 0xcb, 0x63, 0xa8, 0xb0, 0xd1, 0xbb, 0xfa, 0x92, 0xec, 0xa2, 0xb5,
	0xc2, 0x59, 0xfd, 0x5e, 0x5a, 0xdb, 0x75, 0x90, 0x4a, 0x25, 0x53, 0xa9, 0xce, 0x5f, 0xed, 0x20,
	0xff, 0xc5, 0x82, 0x96, 0x74, 0x41, 0x56, 0x13, 0x55, 0x59, 0x98, 0xca, 0x49, 0x94, 0x1b, 0x57,
	0xe9, 0xea, 0x45, 0xa8, 0x47, 0x94, 0xb8, 0x23, 0x4d, 0xae, 0xe5, 0x8d, 0x9d, 0x64, 0x04, 0xb7,
	0xe4, 0xa3, 0x8f, 0x28, 0xc2, 0xf6, 0x32, 0x40, 0x36, 0xd7, 0xa1, 0xb8, 0xf9, 0xcd, 0x82, 0x66,
	0x96, 0x9e, 0xb2, 0x9d, 0xb1, 0x5a, 0xc8, 0xeb, 0x19, 0x2d, 0x58, 0x66, 0x55, 0xc9, 0xd3, 0x05,
	0xc9, 0x53, 0x8d, 0x99, 0xbe, 0x5d, 0x62, 0xfa, 0x5c, 0x96, 0x26, 0xfe, 0x17, 0x2c, 0xfd, 0x6c,
	0xb1, 0x2b, 0x69, 0x7e, 0x33, 0xe4, 0xa9, 0xaa, 0xda, 0x02, 0x45, 0xd3, 0x4a, 0xbe, 0x96, 0x75,
	0xbe, 0x70, 0x95, 0x7d, 0x81, 0xb4, 0x37, 0x45, 0xcd, 0x17, 0x30, 0x9f, 0xf9, 0x46, 0x5c, 0xaf,
	0x9f, 0x5c, 0x8b, 0xf2, 0xc4, 0xbc, 0x9c, 0x08, 0x38, 0x2b, 0x45, 0xcb, 0x0b, 0x78, 0xc7, 0x5f,
	0xc3, 0x89, 0x6c, 0x48, 0x3c, 0x8c, 0xfa, 0x55, 0x09, 0x7a, 0x39, 0x3f, 0xb6, 0x61, 0x5a, 0xc2,
	0x96, 0x6d, 0x90, 0x97, 0x02, 0x5d, 0xba, 0x6f, 0x42, 0x43, 0xbe, 0x5f, 0xa0, 0x55, 0x26, 0x40,
	0xd2, 0xe6, 0x29, 0x59, 0x38, 0x73, 0x6f, 0x20, 0x6d, 0xc4, 0x7e, 0x68, 0xcf, 0x1e, 0xd8, 0x48,
	0xac, 0x95, 0xf7, 0x12, 0x61, 0x5d, 0x7c, 0x41, 0x29, 0xb7, 0x5e, 0xda, 0x80, 0x63, 0xe2, 0x6e,
	0x82, 0x56, 0x01, 0xb2, 0xb7, 0x01, 0x74, 0x92, 0x0d, 0x2f, 0xbc, 0x38, 0xb4, 0x17, 0x0a, 0xfd,
	0x1c, 0x68, 0x15, 0xea, 0x4c, 0x1a, 0xa2, 0x0b, 0xd0, 0x90, 0x17, 0x34, 0xb4, 0x50, 0x76, 0x5f,
	0x6b, 0xb7, 0xb2, 0xdb, 0xad, 0xb4, 0xfe, 0xd5, 0x84, 0x3a, 0x13, 0xb2, 0xe8, 0x03, 0x66, 0xce,
	0xbf, 0x17, 0xca, 0xae, 0x07, 0xed, 0xa6, 0x8c, 0x50, 0x32, 0x70, 0x9e, 0x09, 0x12, 0x29, 0xbd,
	0xe7, 0xd8, 0x6f, 0x45, 0x8c, 0x17, 0x0d, 0xde, 0x67, 0x82, 0x9e, 0xcf, 0x31, 0xcb, 0x7e, 0xa6,
	0x22, 0x5b, 0xd0, 0xa4, 0xe9, 0x6a, 0x6c, 0x2c, 0xfd, 0x60, 0x42, 0x43, 0x0a, 0x23, 0x74, 0x05,
	0xe6, 0xba, 0xd4, 0xf7, 0xf6, 0x68, 0x44, 0x5d, 0x7d, 0x56, 0x45, 0x47, 0xb6, 0x4f, 0xa4, 0x40,
	0xaa, 0xaa, 0xc3, 0x06, 0xba, 0x22, 0x9e, 0x07, 0xa4, 0xe9, 0x62, 0x46, 0x87, 0xae, 0xab, 0xdb,
	0xf3, 0xbc, 0x5e, 0x2a, 0x82, 0x0c, 0x1b, 0x4b, 0xff, 0x9a, 0x70, 0x4c, 0xaa, 0x8b, 0xcb, 0x30,
	0x9b, 0x49, 0x31, 0xa6, 0xb4, 0x5a, 0x69, 0xfa, 0x79, 0xa7, 0x70, 0x23, 0xaf, 0xc8, 0xb0, 0x81,
	0x2e, 0xb1, 0x47, 0x29, 0xf1, 0x43, 0xfa, 0xd2, 0x4a, 0xd7, 0x9e, 0x30, 0x9f, 0x2f, 0x98, 0x63,
	0x03, 0x7d, 0x08, 0x4d, 0x2e, 0x44, 0xa4, 0x1f, 0x3c, 0x7a, 0x45, 0x9c, 0x94, 0xdb, 0x5d, 0x84,
	0x66, 0x97, 0xfa, 0x34, 0xb3, 0x2b, 0x78, 0x5b, 0x66, 0xb6, 0xf4, 0x57, 0x42, 0xbe, 0xd8, 0xe1,
	0x09, 0x7b, 0xdb, 0xb4, 0xef, 0xa6, 0xed, 0x53, 0x15, 0x35, 0x52, 0x24, 0x52, 0x3b, 0x6c, 0xb0,
	0x81, 0xae, 0xc1, 0x71, 0xbe, 0x9b, 0xbb, 0xf4, 0x36, 0xed, 0xa5, 0x8b, 0xa6, 0x9d, 0x1b, 0xac,
	0x94, 0x91, 0x36, 0x0f, 0x4e, 0xa9, 0x01, 0xd8, 0x40, 0xcb, 0x30, 0xc9, 0xaf, 0xd1, 0x87, 0xb5,
	0xbc, 0xba, 0xf2, 0xe8, 0x89, 0x6d, 0x3c, 0x7e, 0x62, 0x1b, 0xcf, 0x9e, 0xd8, 0xe6, 0x77, 0x63,
	0xdb, 0xfc, 0x63, 0x6c, 0x9b, 0x0f, 0xc7, 0xb6, 0xf9, 0x68, 0x6c, 0x9b, 0x7f, 0x8f, 0x6d, 0xf3,
	0x9f, 0xb1, 0x6d, 0x3c, 0x1b, 0xdb, 0xe6, 0x8f, 0x4f, 0x6d, 0xe3, 0xd1, 0x53, 0xdb, 0x78, 0xfc,
	0xd4, 0x36, 0xbe, 0xac, 0x77, 0x56, 0x48, 0xe8, 0xdd, 0x9a, 0x64, 0xcf, 0xb4, 0x17, 0xfe, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0x3d, 0xa4, 0x19, 0xae, 0xb3, 0x15, 0x00, 0x00,
}

func (this *Log) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Log)
	if !ok {
		that2, ok := that.(Log)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	return true
}
func (this *NewCustomerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCustomerRequest)
	if !ok {
		that2, ok := that.(NewCustomerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *GetCustomerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCustomerRequest)
	if !ok {
		that2, ok := that.(GetCustomerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *CustomerReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomerReply)
	if !ok {
		that2, ok := that.(CustomerReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *PaymentStorage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaymentStorage)
	if !ok {
		that2, ok := that.(PaymentStorage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Canceled != that1.Canceled {
		return false
	}
	return true
}
func (this *NewPaymentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewPaymentRequest)
	if !ok {
		that2, ok := that.(NewPaymentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *PayPaymentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PayPaymentRequest)
	if !ok {
		that2, ok := that.(PayPaymentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *PayPaymentReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PayPaymentReply)
	if !ok {
		that2, ok := that.(PayPaymentReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	if this.StillToPay != that1.StillToPay {
		return false
	}
	return true
}
func (this *CancelPaymentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelPaymentRequest)
	if !ok {
		that2, ok := that.(CancelPaymentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	if this.CustomerName != that1.CustomerName {
		return false
	}
	if this.CustomerAddress != that1.CustomerAddress {
		return false
	}
	return true
}
func (this *RefundPaymentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefundPaymentRequest)
	if !ok {
		that2, ok := that.(RefundPaymentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	if this.CustomerName != that1.CustomerName {
		return false
	}
	if this.CustomerAddress != that1.CustomerAddress {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *OrderStorage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrderStorage)
	if !ok {
		that2, ok := that.(OrderStorage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomerID != that1.CustomerID {
		return false
	}
	if len(this.Articles) != len(that1.Articles) {
		return false
	}
	for i := range this.Articles {
		if this.Articles[i] != that1.Articles[i] {
			return false
		}
	}
	if this.TotalCost != that1.TotalCost {
		return false
	}
	if this.Payed != that1.Payed {
		return false
	}
	if this.Shipped != that1.Shipped {
		return false
	}
	if this.Canceled != that1.Canceled {
		return false
	}
	return true
}
func (this *NewOrderRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewOrderRequest)
	if !ok {
		that2, ok := that.(NewOrderRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomerID != that1.CustomerID {
		return false
	}
	if len(this.Articles) != len(that1.Articles) {
		return false
	}
	for i := range this.Articles {
		if this.Articles[i] != that1.Articles[i] {
			return false
		}
	}
	return true
}
func (this *OrderReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrderReply)
	if !ok {
		that2, ok := that.(OrderReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	if this.TotalCost != that1.TotalCost {
		return false
	}
	return true
}
func (this *OrderPaymentUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrderPaymentUpdate)
	if !ok {
		that2, ok := that.(OrderPaymentUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	return true
}
func (this *OrderShipmentUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrderShipmentUpdate)
	if !ok {
		that2, ok := that.(OrderShipmentUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	return true
}
func (this *CancelOrderRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelOrderRequest)
	if !ok {
		that2, ok := that.(CancelOrderRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	return true
}
func (this *RefundArticleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefundArticleRequest)
	if !ok {
		that2, ok := that.(RefundArticleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	if this.ArticleId != that1.ArticleId {
		return false
	}
	return true
}
func (this *NewStockRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewStockRequest)
	if !ok {
		that2, ok := that.(NewStockRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if len(this.Reserved) != len(that1.Reserved) {
		return false
	}
	for i := range this.Reserved {
		if this.Reserved[i] != that1.Reserved[i] {
			return false
		}
	}
	return true
}
func (this *AddStockRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddStockRequest)
	if !ok {
		that2, ok := that.(AddStockRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *GetReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReply)
	if !ok {
		that2, ok := that.(GetReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *TakeArticle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TakeArticle)
	if !ok {
		that2, ok := that.(TakeArticle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.ShipmentId != that1.ShipmentId {
		return false
	}
	return true
}
func (this *ArticleID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArticleID)
	if !ok {
		that2, ok := that.(ArticleID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetStockReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetStockReply)
	if !ok {
		that2, ok := that.(GetStockReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Answer != that1.Answer {
		return false
	}
	return true
}
func (this *CancelReservedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelReservedRequest)
	if !ok {
		that2, ok := that.(CancelReservedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ShipmentId != that1.ShipmentId {
		return false
	}
	return true
}
func (this *OrderArticleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrderArticleRequest)
	if !ok {
		that2, ok := that.(OrderArticleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	if this.ArticleId != that1.ArticleId {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *SupplierStorage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupplierStorage)
	if !ok {
		that2, ok := that.(SupplierStorage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ArticleId != that1.ArticleId {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.NameSupplier != that1.NameSupplier {
		return false
	}
	return true
}
func (this *NewArticles) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewArticles)
	if !ok {
		that2, ok := that.(NewArticles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	if this.ArticleId != that1.ArticleId {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.NameSupplier != that1.NameSupplier {
		return false
	}
	return true
}
func (this *GetSupplierReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSupplierReply)
	if !ok {
		that2, ok := that.(GetSupplierReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	if this.ArticleId != that1.ArticleId {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.NameSupplier != that1.NameSupplier {
		return false
	}
	return true
}
func (this *SupplierName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupplierName)
	if !ok {
		that2, ok := that.(SupplierName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetCatalog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCatalog)
	if !ok {
		that2, ok := that.(GetCatalog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *CatalogReplyInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CatalogReplyInfo)
	if !ok {
		that2, ok := that.(CatalogReplyInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Availability != that1.Availability {
		return false
	}
	return true
}
func (this *CatalogReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CatalogReply)
	if !ok {
		that2, ok := that.(CatalogReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	return true
}
func (this *NewCatalog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCatalog)
	if !ok {
		that2, ok := that.(NewCatalog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	return true
}
func (this *UpdatedData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdatedData)
	if !ok {
		that2, ok := that.(UpdatedData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	return true
}
func (this *NewShipmentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewShipmentRequest)
	if !ok {
		that2, ok := that.(NewShipmentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrderID != that1.OrderID {
		return false
	}
	if len(this.Articles) != len(that1.Articles) {
		return false
	}
	for i := range this.Articles {
		if this.Articles[i] != that1.Articles[i] {
			return false
		}
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *ShipmentStorage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShipmentStorage)
	if !ok {
		that2, ok := that.(ShipmentStorage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Articles) != len(that1.Articles) {
		return false
	}
	for i := range this.Articles {
		if this.Articles[i] != that1.Articles[i] {
			return false
		}
	}
	if len(this.Ready) != len(that1.Ready) {
		return false
	}
	for i := range this.Ready {
		if this.Ready[i] != that1.Ready[i] {
			return false
		}
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *ShipmentReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShipmentReply)
	if !ok {
		that2, ok := that.(ShipmentReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Articles) != len(that1.Articles) {
		return false
	}
	for i := range this.Articles {
		if this.Articles[i] != that1.Articles[i] {
			return false
		}
	}
	if len(this.Ready) != len(that1.Ready) {
		return false
	}
	for i := range this.Ready {
		if this.Ready[i] != that1.Ready[i] {
			return false
		}
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *GetShipmentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetShipmentRequest)
	if !ok {
		that2, ok := that.(GetShipmentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Articles) != len(that1.Articles) {
		return false
	}
	for i := range this.Articles {
		if this.Articles[i] != that1.Articles[i] {
			return false
		}
	}
	if len(this.Ready) != len(that1.Ready) {
		return false
	}
	for i := range this.Ready {
		if this.Ready[i] != that1.Ready[i] {
			return false
		}
	}
	return true
}
func (this *ShipmentReadiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShipmentReadiness)
	if !ok {
		that2, ok := that.(ShipmentReadiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ArticleId != that1.ArticleId {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *CancelShipmentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelShipmentRequest)
	if !ok {
		that2, ok := that.(CancelShipmentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ShipmentReturnRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShipmentReturnRequest)
	if !ok {
		that2, ok := that.(ShipmentReturnRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ArticleId != that1.ArticleId {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *ReturnReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReturnReply)
	if !ok {
		that2, ok := that.(ReturnReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ArticleId != that1.ArticleId {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *Log) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.Log{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewCustomerRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.NewCustomerRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCustomerRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetCustomerRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomerReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.CustomerReply{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PaymentStorage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.PaymentStorage{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Canceled: "+fmt.Sprintf("%#v", this.Canceled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewPaymentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.NewPaymentRequest{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PayPaymentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.PayPaymentRequest{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PayPaymentReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.PayPaymentReply{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "StillToPay: "+fmt.Sprintf("%#v", this.StillToPay)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelPaymentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.CancelPaymentRequest{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "CustomerName: "+fmt.Sprintf("%#v", this.CustomerName)+",\n")
	s = append(s, "CustomerAddress: "+fmt.Sprintf("%#v", this.CustomerAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RefundPaymentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api.RefundPaymentRequest{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "CustomerName: "+fmt.Sprintf("%#v", this.CustomerName)+",\n")
	s = append(s, "CustomerAddress: "+fmt.Sprintf("%#v", this.CustomerAddress)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderStorage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&api.OrderStorage{")
	s = append(s, "CustomerID: "+fmt.Sprintf("%#v", this.CustomerID)+",\n")
	keysForArticles := make([]uint32, 0, len(this.Articles))
	for k, _ := range this.Articles {
		keysForArticles = append(keysForArticles, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForArticles)
	mapStringForArticles := "map[uint32]uint32{"
	for _, k := range keysForArticles {
		mapStringForArticles += fmt.Sprintf("%#v: %#v,", k, this.Articles[k])
	}
	mapStringForArticles += "}"
	if this.Articles != nil {
		s = append(s, "Articles: "+mapStringForArticles+",\n")
	}
	s = append(s, "TotalCost: "+fmt.Sprintf("%#v", this.TotalCost)+",\n")
	s = append(s, "Payed: "+fmt.Sprintf("%#v", this.Payed)+",\n")
	s = append(s, "Shipped: "+fmt.Sprintf("%#v", this.Shipped)+",\n")
	s = append(s, "Canceled: "+fmt.Sprintf("%#v", this.Canceled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewOrderRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.NewOrderRequest{")
	s = append(s, "CustomerID: "+fmt.Sprintf("%#v", this.CustomerID)+",\n")
	keysForArticles := make([]uint32, 0, len(this.Articles))
	for k, _ := range this.Articles {
		keysForArticles = append(keysForArticles, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForArticles)
	mapStringForArticles := "map[uint32]uint32{"
	for _, k := range keysForArticles {
		mapStringForArticles += fmt.Sprintf("%#v: %#v,", k, this.Articles[k])
	}
	mapStringForArticles += "}"
	if this.Articles != nil {
		s = append(s, "Articles: "+mapStringForArticles+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.OrderReply{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "TotalCost: "+fmt.Sprintf("%#v", this.TotalCost)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderPaymentUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.OrderPaymentUpdate{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderShipmentUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.OrderShipmentUpdate{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelOrderRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.CancelOrderRequest{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RefundArticleRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.RefundArticleRequest{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "ArticleId: "+fmt.Sprintf("%#v", this.ArticleId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewStockRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.NewStockRequest{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	keysForReserved := make([]uint32, 0, len(this.Reserved))
	for k, _ := range this.Reserved {
		keysForReserved = append(keysForReserved, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForReserved)
	mapStringForReserved := "map[uint32]uint32{"
	for _, k := range keysForReserved {
		mapStringForReserved += fmt.Sprintf("%#v: %#v,", k, this.Reserved[k])
	}
	mapStringForReserved += "}"
	if this.Reserved != nil {
		s = append(s, "Reserved: "+mapStringForReserved+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddStockRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.AddStockRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetReply{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TakeArticle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.TakeArticle{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "ShipmentId: "+fmt.Sprintf("%#v", this.ShipmentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ArticleID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.ArticleID{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetStockReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetStockReply{")
	s = append(s, "Answer: "+fmt.Sprintf("%#v", this.Answer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelReservedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.CancelReservedRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "ShipmentId: "+fmt.Sprintf("%#v", this.ShipmentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderArticleRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.OrderArticleRequest{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "ArticleId: "+fmt.Sprintf("%#v", this.ArticleId)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SupplierStorage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.SupplierStorage{")
	s = append(s, "ArticleId: "+fmt.Sprintf("%#v", this.ArticleId)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "NameSupplier: "+fmt.Sprintf("%#v", this.NameSupplier)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewArticles) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api.NewArticles{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "ArticleId: "+fmt.Sprintf("%#v", this.ArticleId)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "NameSupplier: "+fmt.Sprintf("%#v", this.NameSupplier)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSupplierReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api.GetSupplierReply{")
	s = append(s, "OrderId: "+fmt.Sprintf("%#v", this.OrderId)+",\n")
	s = append(s, "ArticleId: "+fmt.Sprintf("%#v", this.ArticleId)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "NameSupplier: "+fmt.Sprintf("%#v", this.NameSupplier)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SupplierName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.SupplierName{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCatalog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetCatalog{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CatalogReplyInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&api.CatalogReplyInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "Availability: "+fmt.Sprintf("%#v", this.Availability)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CatalogReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api.CatalogReply{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewCatalog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.NewCatalog{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatedData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api.UpdatedData{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewShipmentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.NewShipmentRequest{")
	s = append(s, "OrderID: "+fmt.Sprintf("%#v", this.OrderID)+",\n")
	keysForArticles := make([]uint32, 0, len(this.Articles))
	for k, _ := range this.Articles {
		keysForArticles = append(keysForArticles, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForArticles)
	mapStringForArticles := "map[uint32]uint32{"
	for _, k := range keysForArticles {
		mapStringForArticles += fmt.Sprintf("%#v: %#v,", k, this.Articles[k])
	}
	mapStringForArticles += "}"
	if this.Articles != nil {
		s = append(s, "Articles: "+mapStringForArticles+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShipmentStorage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.ShipmentStorage{")
	keysForArticles := make([]uint32, 0, len(this.Articles))
	for k, _ := range this.Articles {
		keysForArticles = append(keysForArticles, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForArticles)
	mapStringForArticles := "map[uint32]uint32{"
	for _, k := range keysForArticles {
		mapStringForArticles += fmt.Sprintf("%#v: %#v,", k, this.Articles[k])
	}
	mapStringForArticles += "}"
	if this.Articles != nil {
		s = append(s, "Articles: "+mapStringForArticles+",\n")
	}
	keysForReady := make([]uint32, 0, len(this.Ready))
	for k, _ := range this.Ready {
		keysForReady = append(keysForReady, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForReady)
	mapStringForReady := "map[uint32]uint32{"
	for _, k := range keysForReady {
		mapStringForReady += fmt.Sprintf("%#v: %#v,", k, this.Ready[k])
	}
	mapStringForReady += "}"
	if this.Ready != nil {
		s = append(s, "Ready: "+mapStringForReady+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShipmentReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api.ShipmentReply{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	keysForArticles := make([]uint32, 0, len(this.Articles))
	for k, _ := range this.Articles {
		keysForArticles = append(keysForArticles, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForArticles)
	mapStringForArticles := "map[uint32]uint32{"
	for _, k := range keysForArticles {
		mapStringForArticles += fmt.Sprintf("%#v: %#v,", k, this.Articles[k])
	}
	mapStringForArticles += "}"
	if this.Articles != nil {
		s = append(s, "Articles: "+mapStringForArticles+",\n")
	}
	keysForReady := make([]uint32, 0, len(this.Ready))
	for k, _ := range this.Ready {
		keysForReady = append(keysForReady, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForReady)
	mapStringForReady := "map[uint32]uint32{"
	for _, k := range keysForReady {
		mapStringForReady += fmt.Sprintf("%#v: %#v,", k, this.Ready[k])
	}
	mapStringForReady += "}"
	if this.Ready != nil {
		s = append(s, "Ready: "+mapStringForReady+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetShipmentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.GetShipmentRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	keysForArticles := make([]uint32, 0, len(this.Articles))
	for k, _ := range this.Articles {
		keysForArticles = append(keysForArticles, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForArticles)
	mapStringForArticles := "map[uint32]uint32{"
	for _, k := range keysForArticles {
		mapStringForArticles += fmt.Sprintf("%#v: %#v,", k, this.Articles[k])
	}
	mapStringForArticles += "}"
	if this.Articles != nil {
		s = append(s, "Articles: "+mapStringForArticles+",\n")
	}
	keysForReady := make([]uint32, 0, len(this.Ready))
	for k, _ := range this.Ready {
		keysForReady = append(keysForReady, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForReady)
	mapStringForReady := "map[uint32]uint32{"
	for _, k := range keysForReady {
		mapStringForReady += fmt.Sprintf("%#v: %#v,", k, this.Ready[k])
	}
	mapStringForReady += "}"
	if this.Ready != nil {
		s = append(s, "Ready: "+mapStringForReady+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShipmentReadiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.ShipmentReadiness{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "ArticleId: "+fmt.Sprintf("%#v", this.ArticleId)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelShipmentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.CancelShipmentRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShipmentReturnRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.ShipmentReturnRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "ArticleId: "+fmt.Sprintf("%#v", this.ArticleId)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReturnReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.ReturnReply{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "ArticleId: "+fmt.Sprintf("%#v", this.ArticleId)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomerClient is the client API for Customer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerClient interface {
	NewCustomer(ctx context.Context, in *NewCustomerRequest, opts ...grpc.CallOption) (*CustomerReply, error)
	GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*CustomerReply, error)
}

type customerClient struct {
	cc *grpc.ClientConn
}

func NewCustomerClient(cc *grpc.ClientConn) CustomerClient {
	return &customerClient{cc}
}

func (c *customerClient) NewCustomer(ctx context.Context, in *NewCustomerRequest, opts ...grpc.CallOption) (*CustomerReply, error) {
	out := new(CustomerReply)
	err := c.cc.Invoke(ctx, "/api.Customer/NewCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*CustomerReply, error) {
	out := new(CustomerReply)
	err := c.cc.Invoke(ctx, "/api.Customer/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServer is the server API for Customer service.
type CustomerServer interface {
	NewCustomer(context.Context, *NewCustomerRequest) (*CustomerReply, error)
	GetCustomer(context.Context, *GetCustomerRequest) (*CustomerReply, error)
}

// UnimplementedCustomerServer can be embedded to have forward compatible implementations.
type UnimplementedCustomerServer struct {
}

func (*UnimplementedCustomerServer) NewCustomer(ctx context.Context, req *NewCustomerRequest) (*CustomerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCustomer not implemented")
}
func (*UnimplementedCustomerServer) GetCustomer(ctx context.Context, req *GetCustomerRequest) (*CustomerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}

func RegisterCustomerServer(s *grpc.Server, srv CustomerServer) {
	s.RegisterService(&_Customer_serviceDesc, srv)
}

func _Customer_NewCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).NewCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Customer/NewCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).NewCustomer(ctx, req.(*NewCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Customer/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).GetCustomer(ctx, req.(*GetCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Customer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Customer",
	HandlerType: (*CustomerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCustomer",
			Handler:    _Customer_NewCustomer_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _Customer_GetCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// PaymentClient is the client API for Payment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentClient interface {
	PayPayment(ctx context.Context, in *PayPaymentRequest, opts ...grpc.CallOption) (*PayPaymentReply, error)
}

type paymentClient struct {
	cc *grpc.ClientConn
}

func NewPaymentClient(cc *grpc.ClientConn) PaymentClient {
	return &paymentClient{cc}
}

func (c *paymentClient) PayPayment(ctx context.Context, in *PayPaymentRequest, opts ...grpc.CallOption) (*PayPaymentReply, error) {
	out := new(PayPaymentReply)
	err := c.cc.Invoke(ctx, "/api.Payment/PayPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServer is the server API for Payment service.
type PaymentServer interface {
	PayPayment(context.Context, *PayPaymentRequest) (*PayPaymentReply, error)
}

// UnimplementedPaymentServer can be embedded to have forward compatible implementations.
type UnimplementedPaymentServer struct {
}

func (*UnimplementedPaymentServer) PayPayment(ctx context.Context, req *PayPaymentRequest) (*PayPaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayPayment not implemented")
}

func RegisterPaymentServer(s *grpc.Server, srv PaymentServer) {
	s.RegisterService(&_Payment_serviceDesc, srv)
}

func _Payment_PayPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).PayPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Payment/PayPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).PayPayment(ctx, req.(*PayPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Payment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Payment",
	HandlerType: (*PaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayPayment",
			Handler:    _Payment_PayPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderClient interface {
	NewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*OrderReply, error)
}

type orderClient struct {
	cc *grpc.ClientConn
}

func NewOrderClient(cc *grpc.ClientConn) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) NewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*OrderReply, error) {
	out := new(OrderReply)
	err := c.cc.Invoke(ctx, "/api.Order/NewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
type OrderServer interface {
	NewOrder(context.Context, *NewOrderRequest) (*OrderReply, error)
}

// UnimplementedOrderServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (*UnimplementedOrderServer) NewOrder(ctx context.Context, req *NewOrderRequest) (*OrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrder not implemented")
}

func RegisterOrderServer(s *grpc.Server, srv OrderServer) {
	s.RegisterService(&_Order_serviceDesc, srv)
}

func _Order_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Order/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).NewOrder(ctx, req.(*NewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Order_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewOrder",
			Handler:    _Order_NewOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// StockClient is the client API for Stock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StockClient interface {
	NewStock(ctx context.Context, in *NewStockRequest, opts ...grpc.CallOption) (*GetReply, error)
	GetArticle(ctx context.Context, in *TakeArticle, opts ...grpc.CallOption) (*GetReply, error)
	GetStock(ctx context.Context, in *ArticleID, opts ...grpc.CallOption) (*GetStockReply, error)
}

type stockClient struct {
	cc *grpc.ClientConn
}

func NewStockClient(cc *grpc.ClientConn) StockClient {
	return &stockClient{cc}
}

func (c *stockClient) NewStock(ctx context.Context, in *NewStockRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/api.Stock/NewStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) GetArticle(ctx context.Context, in *TakeArticle, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/api.Stock/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) GetStock(ctx context.Context, in *ArticleID, opts ...grpc.CallOption) (*GetStockReply, error) {
	out := new(GetStockReply)
	err := c.cc.Invoke(ctx, "/api.Stock/GetStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServer is the server API for Stock service.
type StockServer interface {
	NewStock(context.Context, *NewStockRequest) (*GetReply, error)
	GetArticle(context.Context, *TakeArticle) (*GetReply, error)
	GetStock(context.Context, *ArticleID) (*GetStockReply, error)
}

// UnimplementedStockServer can be embedded to have forward compatible implementations.
type UnimplementedStockServer struct {
}

func (*UnimplementedStockServer) NewStock(ctx context.Context, req *NewStockRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewStock not implemented")
}
func (*UnimplementedStockServer) GetArticle(ctx context.Context, req *TakeArticle) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (*UnimplementedStockServer) GetStock(ctx context.Context, req *ArticleID) (*GetStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStock not implemented")
}

func RegisterStockServer(s *grpc.Server, srv StockServer) {
	s.RegisterService(&_Stock_serviceDesc, srv)
}

func _Stock_NewStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).NewStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Stock/NewStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).NewStock(ctx, req.(*NewStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Stock/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).GetArticle(ctx, req.(*TakeArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_GetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).GetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Stock/GetStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).GetStock(ctx, req.(*ArticleID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Stock",
	HandlerType: (*StockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewStock",
			Handler:    _Stock_NewStock_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _Stock_GetArticle_Handler,
		},
		{
			MethodName: "GetStock",
			Handler:    _Stock_GetStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// SupplierClient is the client API for Supplier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SupplierClient interface {
	DeliveredArticle(ctx context.Context, in *NewArticles, opts ...grpc.CallOption) (*GetSupplierReply, error)
	OrderArticle(ctx context.Context, in *OrderArticleRequest, opts ...grpc.CallOption) (*SupplierName, error)
}

type supplierClient struct {
	cc *grpc.ClientConn
}

func NewSupplierClient(cc *grpc.ClientConn) SupplierClient {
	return &supplierClient{cc}
}

func (c *supplierClient) DeliveredArticle(ctx context.Context, in *NewArticles, opts ...grpc.CallOption) (*GetSupplierReply, error) {
	out := new(GetSupplierReply)
	err := c.cc.Invoke(ctx, "/api.Supplier/DeliveredArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierClient) OrderArticle(ctx context.Context, in *OrderArticleRequest, opts ...grpc.CallOption) (*SupplierName, error) {
	out := new(SupplierName)
	err := c.cc.Invoke(ctx, "/api.Supplier/OrderArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupplierServer is the server API for Supplier service.
type SupplierServer interface {
	DeliveredArticle(context.Context, *NewArticles) (*GetSupplierReply, error)
	OrderArticle(context.Context, *OrderArticleRequest) (*SupplierName, error)
}

// UnimplementedSupplierServer can be embedded to have forward compatible implementations.
type UnimplementedSupplierServer struct {
}

func (*UnimplementedSupplierServer) DeliveredArticle(ctx context.Context, req *NewArticles) (*GetSupplierReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliveredArticle not implemented")
}
func (*UnimplementedSupplierServer) OrderArticle(ctx context.Context, req *OrderArticleRequest) (*SupplierName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderArticle not implemented")
}

func RegisterSupplierServer(s *grpc.Server, srv SupplierServer) {
	s.RegisterService(&_Supplier_serviceDesc, srv)
}

func _Supplier_DeliveredArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewArticles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServer).DeliveredArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Supplier/DeliveredArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServer).DeliveredArticle(ctx, req.(*NewArticles))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supplier_OrderArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServer).OrderArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Supplier/OrderArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServer).OrderArticle(ctx, req.(*OrderArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Supplier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Supplier",
	HandlerType: (*SupplierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeliveredArticle",
			Handler:    _Supplier_DeliveredArticle_Handler,
		},
		{
			MethodName: "OrderArticle",
			Handler:    _Supplier_OrderArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CatalogClient interface {
	GetCatalogInfo(ctx context.Context, in *GetCatalog, opts ...grpc.CallOption) (*CatalogReplyInfo, error)
	NewCatalogArticle(ctx context.Context, in *NewCatalog, opts ...grpc.CallOption) (*CatalogReply, error)
	UpdateCatalog(ctx context.Context, in *UpdatedData, opts ...grpc.CallOption) (*CatalogReply, error)
	DeleteCatalog(ctx context.Context, in *GetCatalog, opts ...grpc.CallOption) (*CatalogReply, error)
}

type catalogClient struct {
	cc *grpc.ClientConn
}

func NewCatalogClient(cc *grpc.ClientConn) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) GetCatalogInfo(ctx context.Context, in *GetCatalog, opts ...grpc.CallOption) (*CatalogReplyInfo, error) {
	out := new(CatalogReplyInfo)
	err := c.cc.Invoke(ctx, "/api.Catalog/GetCatalogInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) NewCatalogArticle(ctx context.Context, in *NewCatalog, opts ...grpc.CallOption) (*CatalogReply, error) {
	out := new(CatalogReply)
	err := c.cc.Invoke(ctx, "/api.Catalog/NewCatalogArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UpdateCatalog(ctx context.Context, in *UpdatedData, opts ...grpc.CallOption) (*CatalogReply, error) {
	out := new(CatalogReply)
	err := c.cc.Invoke(ctx, "/api.Catalog/UpdateCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) DeleteCatalog(ctx context.Context, in *GetCatalog, opts ...grpc.CallOption) (*CatalogReply, error) {
	out := new(CatalogReply)
	err := c.cc.Invoke(ctx, "/api.Catalog/DeleteCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
type CatalogServer interface {
	GetCatalogInfo(context.Context, *GetCatalog) (*CatalogReplyInfo, error)
	NewCatalogArticle(context.Context, *NewCatalog) (*CatalogReply, error)
	UpdateCatalog(context.Context, *UpdatedData) (*CatalogReply, error)
	DeleteCatalog(context.Context, *GetCatalog) (*CatalogReply, error)
}

// UnimplementedCatalogServer can be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (*UnimplementedCatalogServer) GetCatalogInfo(ctx context.Context, req *GetCatalog) (*CatalogReplyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalogInfo not implemented")
}
func (*UnimplementedCatalogServer) NewCatalogArticle(ctx context.Context, req *NewCatalog) (*CatalogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCatalogArticle not implemented")
}
func (*UnimplementedCatalogServer) UpdateCatalog(ctx context.Context, req *UpdatedData) (*CatalogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCatalog not implemented")
}
func (*UnimplementedCatalogServer) DeleteCatalog(ctx context.Context, req *GetCatalog) (*CatalogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCatalog not implemented")
}

func RegisterCatalogServer(s *grpc.Server, srv CatalogServer) {
	s.RegisterService(&_Catalog_serviceDesc, srv)
}

func _Catalog_GetCatalogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetCatalogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Catalog/GetCatalogInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetCatalogInfo(ctx, req.(*GetCatalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_NewCatalogArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCatalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).NewCatalogArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Catalog/NewCatalogArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).NewCatalogArticle(ctx, req.(*NewCatalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UpdateCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UpdateCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Catalog/UpdateCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateCatalog(ctx, req.(*UpdatedData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_DeleteCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).DeleteCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Catalog/DeleteCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).DeleteCatalog(ctx, req.(*GetCatalog))
	}
	return interceptor(ctx, in, info, handler)
}

var _Catalog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCatalogInfo",
			Handler:    _Catalog_GetCatalogInfo_Handler,
		},
		{
			MethodName: "NewCatalogArticle",
			Handler:    _Catalog_NewCatalogArticle_Handler,
		},
		{
			MethodName: "UpdateCatalog",
			Handler:    _Catalog_UpdateCatalog_Handler,
		},
		{
			MethodName: "DeleteCatalog",
			Handler:    _Catalog_DeleteCatalog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// ShipmentClient is the client API for Shipment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShipmentClient interface {
	SendShipment(ctx context.Context, in *GetShipmentRequest, opts ...grpc.CallOption) (*ShipmentReply, error)
	ReturnDefectArticle(ctx context.Context, in *ShipmentReturnRequest, opts ...grpc.CallOption) (*ReturnReply, error)
	Refund(ctx context.Context, in *ShipmentReturnRequest, opts ...grpc.CallOption) (*ReturnReply, error)
}

type shipmentClient struct {
	cc *grpc.ClientConn
}

func NewShipmentClient(cc *grpc.ClientConn) ShipmentClient {
	return &shipmentClient{cc}
}

func (c *shipmentClient) SendShipment(ctx context.Context, in *GetShipmentRequest, opts ...grpc.CallOption) (*ShipmentReply, error) {
	out := new(ShipmentReply)
	err := c.cc.Invoke(ctx, "/api.Shipment/SendShipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentClient) ReturnDefectArticle(ctx context.Context, in *ShipmentReturnRequest, opts ...grpc.CallOption) (*ReturnReply, error) {
	out := new(ReturnReply)
	err := c.cc.Invoke(ctx, "/api.Shipment/ReturnDefectArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentClient) Refund(ctx context.Context, in *ShipmentReturnRequest, opts ...grpc.CallOption) (*ReturnReply, error) {
	out := new(ReturnReply)
	err := c.cc.Invoke(ctx, "/api.Shipment/Refund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShipmentServer is the server API for Shipment service.
type ShipmentServer interface {
	SendShipment(context.Context, *GetShipmentRequest) (*ShipmentReply, error)
	ReturnDefectArticle(context.Context, *ShipmentReturnRequest) (*ReturnReply, error)
	Refund(context.Context, *ShipmentReturnRequest) (*ReturnReply, error)
}

// UnimplementedShipmentServer can be embedded to have forward compatible implementations.
type UnimplementedShipmentServer struct {
}

func (*UnimplementedShipmentServer) SendShipment(ctx context.Context, req *GetShipmentRequest) (*ShipmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendShipment not implemented")
}
func (*UnimplementedShipmentServer) ReturnDefectArticle(ctx context.Context, req *ShipmentReturnRequest) (*ReturnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnDefectArticle not implemented")
}
func (*UnimplementedShipmentServer) Refund(ctx context.Context, req *ShipmentReturnRequest) (*ReturnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refund not implemented")
}

func RegisterShipmentServer(s *grpc.Server, srv ShipmentServer) {
	s.RegisterService(&_Shipment_serviceDesc, srv)
}

func _Shipment_SendShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServer).SendShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Shipment/SendShipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServer).SendShipment(ctx, req.(*GetShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shipment_ReturnDefectArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipmentReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServer).ReturnDefectArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Shipment/ReturnDefectArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServer).ReturnDefectArticle(ctx, req.(*ShipmentReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shipment_Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipmentReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServer).Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Shipment/Refund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServer).Refund(ctx, req.(*ShipmentReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shipment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Shipment",
	HandlerType: (*ShipmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendShipment",
			Handler:    _Shipment_SendShipment_Handler,
		},
		{
			MethodName: "ReturnDefectArticle",
			Handler:    _Shipment_ReturnDefectArticle_Handler,
		},
		{
			MethodName: "Refund",
			Handler:    _Shipment_Refund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Log) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewCustomerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCustomerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCustomerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCustomerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCustomerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCustomerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomerReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PaymentStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Canceled {
		i--
		if m.Canceled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Value != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i--
		dAtA[i] = 0x15
	}
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i--
		dAtA[i] = 0x15
	}
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PayPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i--
		dAtA[i] = 0x15
	}
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PayPaymentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayPaymentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayPaymentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StillToPay != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.StillToPay))))
		i--
		dAtA[i] = 0x1d
	}
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *CancelPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomerAddress) > 0 {
		i -= len(m.CustomerAddress)
		copy(dAtA[i:], m.CustomerAddress)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CustomerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CustomerName) > 0 {
		i -= len(m.CustomerName)
		copy(dAtA[i:], m.CustomerName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CustomerName)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefundPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefundPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefundPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.CustomerAddress) > 0 {
		i -= len(m.CustomerAddress)
		copy(dAtA[i:], m.CustomerAddress)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CustomerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CustomerName) > 0 {
		i -= len(m.CustomerName)
		copy(dAtA[i:], m.CustomerName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CustomerName)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Canceled {
		i--
		if m.Canceled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Shipped {
		i--
		if m.Shipped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Payed {
		i--
		if m.Payed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.TotalCost != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalCost))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Articles) > 0 {
		for k := range m.Articles {
			v := m.Articles[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CustomerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CustomerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Articles) > 0 {
		for k := range m.Articles {
			v := m.Articles[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CustomerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CustomerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCost != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalCost))))
		i--
		dAtA[i] = 0x15
	}
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderPaymentUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderPaymentUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderPaymentUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderShipmentUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderShipmentUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderShipmentUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CancelOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefundArticleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefundArticleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefundArticleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ArticleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArticleId))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewStockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewStockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewStockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reserved) > 0 {
		for k := range m.Reserved {
			v := m.Reserved[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddStockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddStockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddStockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TakeArticle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakeArticle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TakeArticle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShipmentId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ShipmentId))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArticleID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStockReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStockReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStockReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Answer {
		i--
		if m.Answer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CancelReservedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelReservedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelReservedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShipmentId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ShipmentId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderArticleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderArticleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderArticleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.ArticleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArticleId))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SupplierStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplierStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplierStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NameSupplier) > 0 {
		i -= len(m.NameSupplier)
		copy(dAtA[i:], m.NameSupplier)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NameSupplier)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.ArticleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArticleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewArticles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewArticles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewArticles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NameSupplier) > 0 {
		i -= len(m.NameSupplier)
		copy(dAtA[i:], m.NameSupplier)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NameSupplier)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.ArticleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArticleId))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSupplierReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSupplierReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSupplierReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NameSupplier) > 0 {
		i -= len(m.NameSupplier)
		copy(dAtA[i:], m.NameSupplier)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NameSupplier)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.ArticleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArticleId))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SupplierName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplierName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplierName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCatalog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCatalog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCatalog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CatalogReplyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CatalogReplyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CatalogReplyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Availability {
		i--
		if m.Availability {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CatalogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CatalogReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CatalogReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCatalog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCatalog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCatalog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewShipmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewShipmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewShipmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Articles) > 0 {
		for k := range m.Articles {
			v := m.Articles[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.OrderID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShipmentStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShipmentStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShipmentStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ready) > 0 {
		for k := range m.Ready {
			v := m.Ready[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Articles) > 0 {
		for k := range m.Articles {
			v := m.Articles[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShipmentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShipmentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShipmentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ready) > 0 {
		for k := range m.Ready {
			v := m.Ready[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Articles) > 0 {
		for k := range m.Articles {
			v := m.Articles[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetShipmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShipmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetShipmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ready) > 0 {
		for k := range m.Ready {
			v := m.Ready[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Articles) > 0 {
		for k := range m.Articles {
			v := m.Articles[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShipmentReadiness) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShipmentReadiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShipmentReadiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.ArticleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArticleId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CancelShipmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelShipmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelShipmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShipmentReturnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShipmentReturnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShipmentReturnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.ArticleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArticleId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReturnReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReturnReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReturnReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.ArticleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArticleId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Log) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *NewCustomerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *GetCustomerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	return n
}

func (m *CustomerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *PaymentStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	if m.Value != 0 {
		n += 5
	}
	if m.Canceled {
		n += 2
	}
	return n
}

func (m *NewPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	if m.Value != 0 {
		n += 5
	}
	return n
}

func (m *PayPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	if m.Value != 0 {
		n += 5
	}
	return n
}

func (m *PayPaymentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	if m.StillToPay != 0 {
		n += 5
	}
	return n
}

func (m *CancelPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	l = len(m.CustomerName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CustomerAddress)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RefundPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	l = len(m.CustomerName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CustomerAddress)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Value != 0 {
		n += 5
	}
	return n
}

func (m *OrderStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomerID != 0 {
		n += 1 + sovApi(uint64(m.CustomerID))
	}
	if len(m.Articles) > 0 {
		for k, v := range m.Articles {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.TotalCost != 0 {
		n += 5
	}
	if m.Payed {
		n += 2
	}
	if m.Shipped {
		n += 2
	}
	if m.Canceled {
		n += 2
	}
	return n
}

func (m *NewOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomerID != 0 {
		n += 1 + sovApi(uint64(m.CustomerID))
	}
	if len(m.Articles) > 0 {
		for k, v := range m.Articles {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *OrderReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	if m.TotalCost != 0 {
		n += 5
	}
	return n
}

func (m *OrderPaymentUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	return n
}

func (m *OrderShipmentUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	return n
}

func (m *CancelOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	return n
}

func (m *RefundArticleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	if m.ArticleId != 0 {
		n += 1 + sovApi(uint64(m.ArticleId))
	}
	return n
}

func (m *NewStockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	if len(m.Reserved) > 0 {
		for k, v := range m.Reserved {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AddStockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	return n
}

func (m *GetReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	return n
}

func (m *TakeArticle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	if m.ShipmentId != 0 {
		n += 1 + sovApi(uint64(m.ShipmentId))
	}
	return n
}

func (m *ArticleID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	return n
}

func (m *GetStockReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Answer {
		n += 2
	}
	return n
}

func (m *CancelReservedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.ShipmentId != 0 {
		n += 1 + sovApi(uint64(m.ShipmentId))
	}
	return n
}

func (m *OrderArticleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	if m.ArticleId != 0 {
		n += 1 + sovApi(uint64(m.ArticleId))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	return n
}

func (m *SupplierStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleId != 0 {
		n += 1 + sovApi(uint64(m.ArticleId))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	l = len(m.NameSupplier)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *NewArticles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	if m.ArticleId != 0 {
		n += 1 + sovApi(uint64(m.ArticleId))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	l = len(m.NameSupplier)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *GetSupplierReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovApi(uint64(m.OrderId))
	}
	if m.ArticleId != 0 {
		n += 1 + sovApi(uint64(m.ArticleId))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	l = len(m.NameSupplier)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SupplierName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *GetCatalog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	return n
}

func (m *CatalogReplyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	if m.Availability {
		n += 2
	}
	return n
}

func (m *CatalogReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	return n
}

func (m *NewCatalog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	return n
}

func (m *UpdatedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	return n
}

func (m *NewShipmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderID != 0 {
		n += 1 + sovApi(uint64(m.OrderID))
	}
	if len(m.Articles) > 0 {
		for k, v := range m.Articles {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ShipmentStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Articles) > 0 {
		for k, v := range m.Articles {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if len(m.Ready) > 0 {
		for k, v := range m.Ready {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ShipmentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if len(m.Articles) > 0 {
		for k, v := range m.Articles {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if len(m.Ready) > 0 {
		for k, v := range m.Ready {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *GetShipmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if len(m.Articles) > 0 {
		for k, v := range m.Articles {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if len(m.Ready) > 0 {
		for k, v := range m.Ready {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ShipmentReadiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.ArticleId != 0 {
		n += 1 + sovApi(uint64(m.ArticleId))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	return n
}

func (m *CancelShipmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	return n
}

func (m *ShipmentReturnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.ArticleId != 0 {
		n += 1 + sovApi(uint64(m.ArticleId))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	return n
}

func (m *ReturnReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.ArticleId != 0 {
		n += 1 + sovApi(uint64(m.ArticleId))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Log) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Log{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewCustomerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewCustomerRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCustomerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCustomerRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomerReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomerReply{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaymentStorage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaymentStorage{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Canceled:` + fmt.Sprintf("%v", this.Canceled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewPaymentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewPaymentRequest{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PayPaymentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PayPaymentRequest{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PayPaymentReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PayPaymentReply{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`StillToPay:` + fmt.Sprintf("%v", this.StillToPay) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelPaymentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelPaymentRequest{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`CustomerName:` + fmt.Sprintf("%v", this.CustomerName) + `,`,
		`CustomerAddress:` + fmt.Sprintf("%v", this.CustomerAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RefundPaymentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefundPaymentRequest{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`CustomerName:` + fmt.Sprintf("%v", this.CustomerName) + `,`,
		`CustomerAddress:` + fmt.Sprintf("%v", this.CustomerAddress) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderStorage) String() string {
	if this == nil {
		return "nil"
	}
	keysForArticles := make([]uint32, 0, len(this.Articles))
	for k, _ := range this.Articles {
		keysForArticles = append(keysForArticles, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForArticles)
	mapStringForArticles := "map[uint32]uint32{"
	for _, k := range keysForArticles {
		mapStringForArticles += fmt.Sprintf("%v: %v,", k, this.Articles[k])
	}
	mapStringForArticles += "}"
	s := strings.Join([]string{`&OrderStorage{`,
		`CustomerID:` + fmt.Sprintf("%v", this.CustomerID) + `,`,
		`Articles:` + mapStringForArticles + `,`,
		`TotalCost:` + fmt.Sprintf("%v", this.TotalCost) + `,`,
		`Payed:` + fmt.Sprintf("%v", this.Payed) + `,`,
		`Shipped:` + fmt.Sprintf("%v", this.Shipped) + `,`,
		`Canceled:` + fmt.Sprintf("%v", this.Canceled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewOrderRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForArticles := make([]uint32, 0, len(this.Articles))
	for k, _ := range this.Articles {
		keysForArticles = append(keysForArticles, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForArticles)
	mapStringForArticles := "map[uint32]uint32{"
	for _, k := range keysForArticles {
		mapStringForArticles += fmt.Sprintf("%v: %v,", k, this.Articles[k])
	}
	mapStringForArticles += "}"
	s := strings.Join([]string{`&NewOrderRequest{`,
		`CustomerID:` + fmt.Sprintf("%v", this.CustomerID) + `,`,
		`Articles:` + mapStringForArticles + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderReply{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`TotalCost:` + fmt.Sprintf("%v", this.TotalCost) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderPaymentUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderPaymentUpdate{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderShipmentUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderShipmentUpdate{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelOrderRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelOrderRequest{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RefundArticleRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefundArticleRequest{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`ArticleId:` + fmt.Sprintf("%v", this.ArticleId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewStockRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForReserved := make([]uint32, 0, len(this.Reserved))
	for k, _ := range this.Reserved {
		keysForReserved = append(keysForReserved, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForReserved)
	mapStringForReserved := "map[uint32]uint32{"
	for _, k := range keysForReserved {
		mapStringForReserved += fmt.Sprintf("%v: %v,", k, this.Reserved[k])
	}
	mapStringForReserved += "}"
	s := strings.Join([]string{`&NewStockRequest{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Reserved:` + mapStringForReserved + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddStockRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddStockRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReply{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TakeArticle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TakeArticle{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`ShipmentId:` + fmt.Sprintf("%v", this.ShipmentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ArticleID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArticleID{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetStockReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetStockReply{`,
		`Answer:` + fmt.Sprintf("%v", this.Answer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelReservedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelReservedRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ShipmentId:` + fmt.Sprintf("%v", this.ShipmentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderArticleRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderArticleRequest{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`ArticleId:` + fmt.Sprintf("%v", this.ArticleId) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SupplierStorage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SupplierStorage{`,
		`ArticleId:` + fmt.Sprintf("%v", this.ArticleId) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`NameSupplier:` + fmt.Sprintf("%v", this.NameSupplier) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewArticles) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewArticles{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`ArticleId:` + fmt.Sprintf("%v", this.ArticleId) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`NameSupplier:` + fmt.Sprintf("%v", this.NameSupplier) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSupplierReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSupplierReply{`,
		`OrderId:` + fmt.Sprintf("%v", this.OrderId) + `,`,
		`ArticleId:` + fmt.Sprintf("%v", this.ArticleId) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`NameSupplier:` + fmt.Sprintf("%v", this.NameSupplier) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SupplierName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SupplierName{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCatalog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCatalog{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CatalogReplyInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CatalogReplyInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Availability:` + fmt.Sprintf("%v", this.Availability) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CatalogReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CatalogReply{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewCatalog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewCatalog{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatedData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatedData{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewShipmentRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForArticles := make([]uint32, 0, len(this.Articles))
	for k, _ := range this.Articles {
		keysForArticles = append(keysForArticles, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForArticles)
	mapStringForArticles := "map[uint32]uint32{"
	for _, k := range keysForArticles {
		mapStringForArticles += fmt.Sprintf("%v: %v,", k, this.Articles[k])
	}
	mapStringForArticles += "}"
	s := strings.Join([]string{`&NewShipmentRequest{`,
		`OrderID:` + fmt.Sprintf("%v", this.OrderID) + `,`,
		`Articles:` + mapStringForArticles + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShipmentStorage) String() string {
	if this == nil {
		return "nil"
	}
	keysForArticles := make([]uint32, 0, len(this.Articles))
	for k, _ := range this.Articles {
		keysForArticles = append(keysForArticles, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForArticles)
	mapStringForArticles := "map[uint32]uint32{"
	for _, k := range keysForArticles {
		mapStringForArticles += fmt.Sprintf("%v: %v,", k, this.Articles[k])
	}
	mapStringForArticles += "}"
	keysForReady := make([]uint32, 0, len(this.Ready))
	for k, _ := range this.Ready {
		keysForReady = append(keysForReady, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForReady)
	mapStringForReady := "map[uint32]uint32{"
	for _, k := range keysForReady {
		mapStringForReady += fmt.Sprintf("%v: %v,", k, this.Ready[k])
	}
	mapStringForReady += "}"
	s := strings.Join([]string{`&ShipmentStorage{`,
		`Articles:` + mapStringForArticles + `,`,
		`Ready:` + mapStringForReady + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShipmentReply) String() string {
	if this == nil {
		return "nil"
	}
	keysForArticles := make([]uint32, 0, len(this.Articles))
	for k, _ := range this.Articles {
		keysForArticles = append(keysForArticles, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForArticles)
	mapStringForArticles := "map[uint32]uint32{"
	for _, k := range keysForArticles {
		mapStringForArticles += fmt.Sprintf("%v: %v,", k, this.Articles[k])
	}
	mapStringForArticles += "}"
	keysForReady := make([]uint32, 0, len(this.Ready))
	for k, _ := range this.Ready {
		keysForReady = append(keysForReady, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForReady)
	mapStringForReady := "map[uint32]uint32{"
	for _, k := range keysForReady {
		mapStringForReady += fmt.Sprintf("%v: %v,", k, this.Ready[k])
	}
	mapStringForReady += "}"
	s := strings.Join([]string{`&ShipmentReply{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Articles:` + mapStringForArticles + `,`,
		`Ready:` + mapStringForReady + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetShipmentRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForArticles := make([]uint32, 0, len(this.Articles))
	for k, _ := range this.Articles {
		keysForArticles = append(keysForArticles, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForArticles)
	mapStringForArticles := "map[uint32]uint32{"
	for _, k := range keysForArticles {
		mapStringForArticles += fmt.Sprintf("%v: %v,", k, this.Articles[k])
	}
	mapStringForArticles += "}"
	keysForReady := make([]uint32, 0, len(this.Ready))
	for k, _ := range this.Ready {
		keysForReady = append(keysForReady, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForReady)
	mapStringForReady := "map[uint32]uint32{"
	for _, k := range keysForReady {
		mapStringForReady += fmt.Sprintf("%v: %v,", k, this.Ready[k])
	}
	mapStringForReady += "}"
	s := strings.Join([]string{`&GetShipmentRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Articles:` + mapStringForArticles + `,`,
		`Ready:` + mapStringForReady + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShipmentReadiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShipmentReadiness{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ArticleId:` + fmt.Sprintf("%v", this.ArticleId) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelShipmentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelShipmentRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShipmentReturnRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShipmentReturnRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ArticleId:` + fmt.Sprintf("%v", this.ArticleId) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReturnReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReturnReply{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ArticleId:` + fmt.Sprintf("%v", this.ArticleId) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCustomerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewCustomerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewCustomerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCustomerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCustomerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCustomerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Canceled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Canceled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayPaymentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayPaymentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayPaymentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field StillToPay", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.StillToPay = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefundPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefundPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefundPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerID", wireType)
			}
			m.CustomerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Articles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Articles == nil {
				m.Articles = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Articles[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCost", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalCost = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Payed = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shipped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shipped = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Canceled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Canceled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerID", wireType)
			}
			m.CustomerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Articles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Articles == nil {
				m.Articles = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Articles[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCost", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalCost = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderPaymentUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderPaymentUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderPaymentUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderShipmentUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderShipmentUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderShipmentUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefundArticleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefundArticleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefundArticleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewStockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewStockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewStockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reserved == nil {
				m.Reserved = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Reserved[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddStockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddStockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddStockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakeArticle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakeArticle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakeArticle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipmentId", wireType)
			}
			m.ShipmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipmentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStockReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStockReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStockReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Answer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelReservedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelReservedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelReservedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipmentId", wireType)
			}
			m.ShipmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipmentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderArticleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderArticleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderArticleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupplierStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplierStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplierStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameSupplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameSupplier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewArticles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewArticles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewArticles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameSupplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameSupplier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSupplierReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSupplierReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSupplierReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameSupplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameSupplier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupplierName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplierName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplierName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCatalog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCatalog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCatalog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatalogReplyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogReplyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogReplyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Availability", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Availability = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatalogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCatalog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewCatalog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewCatalog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewShipmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewShipmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewShipmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			m.OrderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Articles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Articles == nil {
				m.Articles = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Articles[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShipmentStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShipmentStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShipmentStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Articles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Articles == nil {
				m.Articles = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Articles[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ready == nil {
				m.Ready = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Ready[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShipmentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShipmentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShipmentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Articles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Articles == nil {
				m.Articles = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Articles[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ready == nil {
				m.Ready = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Ready[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShipmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShipmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShipmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Articles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Articles == nil {
				m.Articles = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Articles[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ready == nil {
				m.Ready = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Ready[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShipmentReadiness) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShipmentReadiness: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShipmentReadiness: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelShipmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelShipmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelShipmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShipmentReturnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShipmentReturnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShipmentReturnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReturnReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReturnReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReturnReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
